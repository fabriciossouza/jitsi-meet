{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/../strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/../events/events.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/js-utils/index.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/../sdp-transform/lib/index.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/../webpack/buildin/global.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/../process/browser.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/../lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/../webpack/buildin/module.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/../sdp/sdp.js","webpack://JitsiMeetJS/../sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/../bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheBoshLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/../async/lib/async.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/TalkMutedDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedNotification.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/rttmonitor/rttmonitor.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/../webpack/buildin/amd-options.js","webpack://JitsiMeetJS/../current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/../rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/../sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/array-equals.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/../timers-browserify/main.js","webpack://JitsiMeetJS/../setimmediate/setImmediate.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","AVATAR_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","BrowserCapabilities","Logger","require","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","_instances","__filename","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","loadCallStatsAPI","callStatsConfIDNamespace","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","dispose","size","emit","values","callStats","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getCallStatsConfID","_getAllCallStatsInstances","csInstances","statistics","cs","roomName","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","eventToLog","properties","sendAnalytics","eventName","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createRttByRegionEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","config","keepPts","rtcpFb","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","IS_SELECTED_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","AUDIO","PRESENTER","VIDEO","usesAdapter","availableDevices","availableDevicesPollTimer","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","aspectRatio","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","initEnumerateDevicesWithCallback","navigator","mediaDevices","enumerateDevices","then","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafariWithVP8","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","bandwidth","firefox_fake_device","fake","desktopStream","chromeMediaSource","screen","chromeMediaSourceId","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","compareAvailableMediaDevices","newDevices","mediaDeviceInfoToJSON","kind","groupId","label","facing","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","onMediaDevicesListChanged","devicesReceived","slice","handleLocalStream","streams","audioStream","videoStream","res","audioVideo","audioTracks","MediaStream","addTrack","videoTracks","desktop","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","defaultSetVideoSrc","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","rtcUtils","clearInterval","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","getTrackID","isChromiumBased","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","useIPv6","googIPv6","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","umDevices","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","devices","requestingDesktop","includes","_getAudioAndVideoStreams","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingExtensionExternalInstallation","desktopSharingSources","gumOptions","trackOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","_newGetUserMediaWithConstraints","getTracks","applyConstraints","_newGetDesktopMedia","maybeRequestCaptureDevices","requestedCaptureDevices","newGetConstraints","effects","deviceType","mediaStream","release","url","revokeObjectURL","isDeviceChangeAvailable","deviceData","enable","googSuspendBelowMinBitrate","Listenable","origAttachMediaStream","apply","getAudioOutputDevice","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","metaData","getSettings","RTC","conference","peerConnections","localTracks","_channel","_channelOpen","_lastN","_lastNEndpoints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","RTCUtils","addListener","newObtainAudioAndVideoPermissions","obtainAudioAndVideoPermissions","eventType","isP2P","elSelector","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","setAudioOutputDevice","isUserStreamById","streamId","isDesktopSharingEnabled","_channelOpenListener","wsUrl","BridgeChannel","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","JitsiConferenceEvents","maxFrameHeight","ids","signaling","iceConfig","getPCConstraints","abtestSuspendVideo","setSuspendVideo","addPermanentProperties","supportsSdpSemantics","sdpSemantics","bundlePolicy","newConnection","TraceablePeerConnection","traceablePeerConnection","localVideo","getLocalTracks","localAudio","tracks","getType","remoteTracks","pcRemoteTracks","getRemoteTracks","mutePromises","audioTrack","mute","unmute","all","pos","owner","removedTracks","pcRemovedTracks","removeRemoteTracks","audioLevel","getTrackBySSRC","isAudioTrack","setAudioLevel","to","sendMessage","remoteAudioTracks","setAudioOutput","CHROME_EXTENSION_GENERIC_ERROR","CHROME_EXTENSION_INSTALLATION_ERROR","CHROME_EXTENSION_USER_GESTURE_REQUIRED","CHROME_EXTENSION_USER_CANCELED","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","FIREFOX_EXTENSION_NEEDED","GENERAL","NOT_FOUND","PERMISSION_DENIED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","SETUP_FAILED","VIDEOBRIDGE_NOT_AVAILABLE","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","$getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","tmp","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","mangle","newdesc","rtpmap","removeSessionLines","prefix","removeMediaLines","toJingle","thecreator","assrcline","creator","amidline","afmtpline","rtcpFbToJingle","crypto","required","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","rids","ridLine","ridInfo","senders","transportToJingle","sctpmap","sctpAttrs","number","setup","payloadtype","rtcpFbFromJingle","each","$","fromJingle","jingle","groups","contents","_","content","jingle2media","sctp","streamCount","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","checkTree","satisfies","_checkCondition","WRONG_STATE","removeEventListener","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","ssrcNumber","attrName","ssrcObj","ssrcNum","primarySSRC","msid","findGroup","fecGroup","findGroupByPrimarySSRC","videoSSRCs","getSSRCs","ssrcGroupInfo","secondarySsrc","groupInfo","oldSSRC","newSSRC","SdpTransformWrap","rawSDP","parsedSDP","transform","selectedMLine","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","order","PENDING","ACTIVE","ENDED","_fabrics","wrtcFuncNames","fabricEvent","DEFAULT_REMOTE_USER","reportType","hasFabric","fabrics","backendInitialized","_addNewFabric","_emptyReportQueue","backend","atLeastOneFabric","defaultInstance","csInstance","defaultConfID","defaultPC","reportsQueue","report","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","configParams","CallStatsBackend","callstats","_traceAndCatchBackendCalls","applicationVersion","getName","siteID","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","_callStatsUserName","_machineId","getLocalStorage","storage","localStorage","_p8","username","UsernameGenerator","generateUsername","jitsiMeetId","sessionId","ALPHANUM","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","getConnectionPluginDefinition","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","serviceUrl","websocketKeepAlive","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","supportsRtx","enableLipSync","rayo","_pingSupported","credentials","performance","statusStr","getStatusString","XMPPEvents","useStunTurn","p2p","getStunAndTurnCredentials","lastErrorMsg","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","_onPrivateMessage","password","JitsiConnectionEvents","anonymousConnectionFailed","connectionFailed","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","connectionHandler","attaching","hosts","anonymousdomain","configDomain","hostname","onCreateResource","roomjid","muc","mucNickname","emuc","createRoom","getLog","dial","isPingSupported","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","MucConnectionPlugin","JingleConnectionPlugin","PingConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastBOSHSuccess","room","jsonString","json","jsonMessage","parsedJson","tryParseJSONAndVerify","users","created_timestamp","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","logDisabled_","deprecationWarnings_","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","extractVersion","uastring","expr","detectBrowser","mozGetUserMedia","webkitGetUserMedia","webkitRTCPeerConnection","shimCreateObjectURL","_options","_resumeRetryN","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","CONN_STATUS_CHANGED","_stropheConnectionCb","targetCallback","_status","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_tryResumingConnection","_wsKeepAlive","Events","_resumeTimeout","getTimeSinceLastSuccess","streamManagement","getResumeToken","intervalWithJitter","fetch","sendBeacon","resumeToken","retryTimeout","getJitterDelay","searchParams","disco","ENVIRONMENT","chromeExtInstalled","chromeExtUpdateRequired","gumFunction","ScreenObtainer","intChromeExtPromise","desktopSharingChromeDisabled","desktopSharingChromeExtId","desktopSharingFirefoxDisabled","_createObtainStreamMethod","isNWJS","JitsiMeetNW","obtainDesktopStream","jitsiError","isElectron","obtainScreenOnElectron","isOpera","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","append","getWebStoreInstallUrl","initInlineInstalls","checkChromeExtInstalled","installed","updateRequired","initChromeExtension","obtainScreenFromExtension","obtainScreenOnFirefox","errorCallback","streamCallback","failCallback","obtainWebRTCScreen","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingChromeSources","streamType","onGetStreamResponse","doGetStreamFromExtensionOptions","chrome","runtime","getStream","sources","lastError","doGetStreamFromExtension","alert","handleExternalInstall","webStoreInstallUrl","checkForChromeExtensionOnInterval","checkAgain","waitInterval","retries","currentRetries","interval","waitForExtensionAfterInstall","getDisplayMedia","getVersion","extVersion","minVersion","s1","s2","n1","n2","isUpdateRequired","desktopSharingChromeMinExtVersion","g","DEFAULT_NOT_IN_LAST_N_TIMEOUT","DEFAULT_RTC_MUTE_TIMEOUT","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","_getVideoFrozenTimeout","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","_changeConnectionStatus","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JingleSessionPC","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","jingleContents","videoContents","JingleSessionState","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","enableFirefoxSimulcast","testing","enableLayerSuspension","startSilent","createPeerConnection","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","iceStarted","onnegotiationneeded","setChatRoom","isSelected","setIsSelected","finishedCallback","_renegotiate","localSDP","localDescription","ice","sdpMLineIndex","jcand","usedrip","dripContainer","sendIceCandidates","candidates","_assertNotEnded","initiatorJid","cands","sdpMid","fingerprintLine","newJingleErrorHandler","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","notifyMySSRCUpdate","jingleOfferElem","originalOffer","clone","remove","newFingerprint","sendTransportAccept","accept","responder","responderJid","videoTransferActive","newSendersValue","sessionModify","transportAccept","medialines","transportReject","sendSessionTerminate","sessionTerminate","reasonDescription","terminate","reasonCondition","reasonText","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","_addOrRemoveRemoteStream","isAdd","logPrefix","readSsrcInfo","remoteDescription","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceAdd","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","offerIq","remoteSdp","removeSsrcInfo","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrackWithoutOfferAnswer","oldTrack","newTrack","workFunction","isVideoTrack","clearRecvonlySsrc","replaceTrack","shouldRenegotiate","newLocalSDP","setMaxBitRate","sourceRemoveElem","ssrcLines","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","_addRemoveTrackAsMuteUnmute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","_verifyNoSSRCChanged","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","newVideoSenders","parseVideoSenders","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","clear","finishCallback","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","JingleSession","PERMISSION_PROMPT_IS_SHOWN","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","binding","cwd","chdir","dir","umask","AudioContext","webkitAudioContext","LocalStatsCollector","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","Uint8Array","frequencyBinCount","getByteTimeDomainData","newLevel","lastLevel","diff","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","trackHandler2Prop","addMediaStreamInactiveHandler","oninactive","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_setHandler","container","_onTrackAttach","_maybeFireTrackAttached","_attachTTFMTracker","_onTrackDetach","active","getStreamId","trackId","getTrackId","E2E_RTT_CHANGED","LARGE_ARRAY_SIZE","HASH_UNDEFINED","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","argsTag","arrayTag","asyncTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","nullTag","objectTag","proxyTag","regexpTag","setTag","stringTag","symbolTag","undefinedTag","arrayBufferTag","dataViewTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","exec","IE_PROTO","nativeObjectToString","reIsNative","RegExp","Buffer","propertyIsEnumerable","symToStringTag","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","eq","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isMasked","isFunction","baseKeys","Ctor","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","some","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_identities","_features","_notifyVersionChanged","oldVersion","ON","OFF","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","AudioContextImpl","createAudioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","onaudioprocess","destination","_disconnectAudioGraph","stopStream","getDeviceLabel","_connectAudioGraph","_destroyed","_cleanupResources","SpeakerStats","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","newName","isNowDominantSpeaker","isDominantSpeaker","timeElapsed","total","webpackPolyfill","deprecate","paths","children","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","_setEffectInProgress","effect","isEnabled","_startStreamEffect","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","getTrack","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","getMSID","_streamEffect","_originalStream","startEffect","stopEffect","_stopStreamEffect","supportsRtpSender","_switchStreamEffect","removeTrack","cont","_queueSetMuted","setMuted","_setMuted","logMuteInfo","doesVideoMuteByStreamRemove","enabled","_removeStreamFromConferenceAsMute","_unregisterHandlers","streamOptions","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","detach","bytesSent","getConnectionState","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","_trackMuteChanged","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","changeMuteState","isLocalAudioTrack","vadEmitter","getTrackLabel","_changeDetectorsMuteState","destroy","JibriSession","_mode","_setSessionID","setStatus","_sessionID","_initiator","_liveStreamViewURL","_terminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","setError","VIDEO_PERMISSION_NAME","JitsiMediaDevices","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","supported","promises","results","every","permissionStatus","consoleTransport","globalTransports","transportIdx","globalOptions","callerInfo","disableCallerInfo","fileLocation","column","getCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","grammar","reg","format","u","z","encoding","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","getOriginalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","getDisplayName","download","Blob","href","click","getRecordingResults","getFileType","DETECTION_TIMEOUT","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","allSettled","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","timeoutS","_retryTimeout","reload","isOpen","closeEvent","_stopConnectionRetries","_startConnectionRetries","OPEN","colibriClass","msgPayload","jsonObject","lastN","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","_retryWebSocketConnection","AnalyticsAdapter","analyticsHandlers","cache","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","isSafari","isVersionLessThan","isSafariWithWebrtc","ondevicechange","usesUnifiedPlan","usesPlanB","RTCRtpTransceiver","_getChromiumBasedVersion","chromium","ua","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","reverse","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","f","isBrowser","compareVersion","isEngine","is","92","93","versionName","94","vendor","model","95","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","statsInterval","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","startAudioLevelStats","getStats","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","pair","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","receiveBandwidth","sendBandwidth","localCandidateType","localip","remoteCandidateType","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","packetsLost","bytesReceivedNow","bytesReceivedBefore","bytesReceived","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","userResolutions","userFramerates","localAvgAudioLevels","avgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","remoteIpAddress","remotePort","localIpAddress","localPort","localIp","networkType","currentRoundTripTime","framerateMean","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","getLocalSSRC","SIMULCAST_LAYERS","SIM_LAYER_RIDS","SIM_LAYER_BITRATES_BPS","audioTransferActive","_dtmfSender","_dtmfTonesQueue","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","updateLog","statsinterval","Interop","interop","Simulcast","simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","trace","what","time","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","times","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","isSimulcastOn","supportsSimulcast","videoTrack","_setVideoType","setMute","endpoints","endpointTrackMap","mediaTrack","getSSRC","findTrackById","onaddtrack","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","streamAudioTracks","streamVideoTracks","mediaLines","mls","trackSsrc","ownerEndpointId","getSSRCOwner","peerMediaInfo","getPeerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","isVersionGreaterThan","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","simulcast_03","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","selectMedia","changed","videoMedia","toRawSDP","enforceSendRecv","transformStreamIdentifiers","prop","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","fidGroups","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","addStream","_removeStream","_handleSenderRemoveStream","removeStream","doesBelong","isMediaStreamInPc","findSenderByKind","getSenders","findSenderByStream","sender","extractPrimarySSRC","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","parsedSdp","toUnifiedPlan","_insertUnifiedPlanSimulcastReceive","getParameters","encodings","setParameters","mungeRemoteDescription","stripRtx","_injectH264IfNotPresent","dummyPayloadType","payloadsArray","sendTones","tones","duration","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","_removePeerConnection","hasCameraTrack","peerConnection","simParams","scaleResolutionDownBy","_createOfferOrAnswer","isOffer","logName","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","videoSender","simIndex","handleLayerSuspension","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_playCallback","_getStatus","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","removeSSRC","addSSRCAttribute","addSSRCGroup","modifyRtxSsrcs2","pcId","streamAndTrackIDs","_addMutedLocalVideoTracksToSDP","sessionDesc","audioMLine","_transformMediaIdentifiers","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","getRtxSSRC","dumpSSRCGroups","removeGroupsWithSSRC","correspondingRtxSsrcs","ssrcMapping","sdpTransformer","getSSRCCount","primaryVideoSsrcs","getPrimaryVideoSSRCs","getSSRCAttrValue","correspondingRtxSsrc","previousAssociatedRtxStream","containsAnySSRCGroups","findGroups","removeGroupsBySemantics","injectRecvOnly","newPrimarySsrc","getPrimaryVideoSsrc","replaceSSRC","getTokenAuthUrl","urlPattern","roleUpgrade","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","getJid","setToken","initJitsiConference","JitsiConference","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","rttMonitor","RttMonitor","e2eping","E2ePing","setupRTCListeners","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","addVADDetectionService","_talkWhileMutedDetection","TalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","setLastN","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","closeBridgeChannel","_delayedIceFailed","cancel","removeXMPPListeners","onMemberLeft","getConnection","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getLocalAudioTrack","getLocalVideoTrack","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","getFromPresence","sendPrivateTextMessage","sendPrivateMessage","sendCommand","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","localVideoTrack","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","_setConference","removeLocalTrack","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","addLocalTrack","setAudioMute","setVideoMute","addAsUnmutePromises","addTrackAsUnmute","removeAsMutePromises","removeTrackAsMute","getRole","isHidden","hiddenDomain","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","selectEndpoints","pinParticipant","pinEndpoint","isInteger","isVideoActive","setMediaTransferActive","getParticipantCount","countHidden","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","nick","statsID","botType","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","getFeatures","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","setAnswer","onTransportInfo","transportInfo","addIceCandidates","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","supportsP2P","errorMsg","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","acceptOffer","_suspendMediaTransferForJvbConnection","bridgeChannelType","webSocket","openBridgeChannel","initializeBridgeChannel","onCallEnded","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","getLogs","getJingleLog","metadata","getXmppLog","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","overallFeedback","detailedFeedback","remoteUserId","getUsageLabel","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","sendChannelMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedNotification","sendIceFailedNotification","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","isEqual","analyticsKeys","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","invite","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","setReceiverVideoConstraint","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","meetingId","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","recorderSession","logObject","getError","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","_onByteSentStatsReceived","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","jitsiTrack","isWebRTCTrackMuted","oldValue","_isMediaTypeMuted","_getFeaturesPromise","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","members","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","getInfo","meetingIdValEl","setMeetingId","getForm","form","formSubmit","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","newRole","discoRoomInfo","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","skipEvents","onMucMemberLeft","reasonSelect","doLeave","isKick","membersKeys","actorNick","actorSelect","onParticipantLeft","subjectText","stamp","dateParts","kickIQ","onError","onNotSupported","formsubmit","handlerIdx","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","onMucLeft","doReject","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","openSctp","machineUID","machineId","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","retry","minDelay","base","LastRequestTracker","_nextValidRid","_lastSuccess","stropheConnection","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","ack","sess","startMuted","modifyContents","replaceTransport","successTime","sendTransportReject","addRemoteStream","removeRemoteStream","me","onTerminated","iceservers","dict","credential","ConnectionPlugin","doInitialize","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","getMediaPresenceInfo","SignalingLayer","_queue","_processQueueTasks","_stopped","kill","task","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","end","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","errStatusCapture","PING_TIMESTAMPS_TO_KEEP","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","onRayo","roomPass","callResource","StropheLogger","logIncoming","logOutgoing","_audioLevel","myUserID","_eventFired","_isLocalAudioTrack","_processing","_scoreArray","_active","_calculateVADScore","_setActiveState","_processTimeout","_audioLvlArray","_calculateNoisyScore","scoreAvg","audioLevelAvg","avgAudioLvl","posAudioLevels","_recordValues","_timeoutTrigger","_hasAudioInput","_clearTriggerTimeout","_audioTrack","_handleAudioInputStateChange","_handleNoAudioInputDetection","STATS_MESSAGE_TYPE","kSimulcastFormats","layers","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_calculateConnectionQuality","_canceled","_iceFailedTimeout","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_sessions","_chatRoom","_handleFocusPresence","_handleJibriPresence","getSession","getID","_addSession","_emitSessionUpdate","_createSession","setLiveStreamViewURL","offerOptions","PCMonitor","getStatsIntervalMs","getStatsInterval","rtts","stopped","startStatsInterval","handleCandidateRtt","rttTotal","candidateKey","responsesReceived","requestsSent","rttTotalDiff","responsesReceivedDiff","requestsResponsesDiff","supportsLocalCandidateRttStatistics","pcMonitors","startPCMonitors","initialDelay","AverageStatReport","calculate","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","supportsRTTStatistics","addNext","batchReport","appendReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","supportsBandwidthStatistics","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","isAudioMuted","localAudioLevelsString","dominantSpeakerId","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","markAsHasLeft","newStats","speakerStatsToUpdate","newParticipant","SphinxService","BEFORE_STATE","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","ProxyConnectionService","jitsiConnection","otherOptions","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","processMessage","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","getLowerResolution","resName","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","emitEvent","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","createTrackVADEmitter","localAudioDeviceId","isMultipleAudioInputSupported","isCollectingLocalStats","lineno","colno","hint","contentHint","util","AuthUtil","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","adapterFactory","dependencies","shimChrome","shimFirefox","shimEdge","shimSafari","logging","browserDetails","adapter","chromeShim","edgeShim","firefoxShim","safariShim","commonShim","shimPeerConnection","browserShim","shimGetUserMedia","shimMediaStream","shimSourceObject","shimOnTrack","shimAddTrackRemoveTrack","shimGetSendersWithDtmf","shimRTCIceCandidate","shimReplaceTrack","shimRTCIceServerUrls","shimCallbacksAPI","shimLocalStreamsAPI","shimRemoteStreamsAPI","shimTrackEventTransceiver","shimCreateOfferLegacy","webkitMediaStream","_ontrack","origSetRemoteDescription","_ontrackpoly","te","getReceivers","Event","dispatchEvent","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","RTCRtpSender","origGetSenders","HTMLMediaElement","_srcObject","origGetLocalStreams","getLocalStreams","nativeStreams","_reverseStreams","_streams","DOMException","newStream","alreadyExists","oldStream","nativeMethod","isLegacyCall","replaceInternalStreamId","origSetLocalDescription","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","streamid","internalId","externalStream","internalStream","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","iceTransports","origGetStats","selector","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","nativeAddIceCandidate","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","getUserMediaPromise_","kinds","MediaStreamTrack","getSources","origGetUserMedia","shimRTCPeerConnection","RTCIceGatherer","origMSTEnabled","RTCDtmfSender","setTrack","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","gatherPolicy","_config","transceivers","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","ontrack","onconnectionstatechange","onicegatheringstatechange","_emitGatheringStateChange","getConfiguration","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","RTCRtpReceiver","getCapabilities","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","remoteCodec","hdrExt","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","RTCTrackEvent","mozSrcObject","mozRTCPeerConnection","newServer","mozRTCSessionDescription","mozRTCIceCandidate","modernStatsTypes","nativeGetStats","onSucc","onErr","InternalError","SecurityError","getUserMedia_","constraintsToFF37_","orgEnumerateDevices","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","_localStreams","getStreamById","_remoteStreams","_addTrack","_onaddstream","_onaddstreampoly","withCallback","errcb","RTCTransceiver","origCreateOffer","audioTransceiver","getTransceivers","setDirection","addTransceiver","videoTransceiver","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","eventNameToWrap","nativeAddEventListener","nativeEventName","_eventMap","nativeRemoveEventListener","unwrappedCb","wrapPeerConnectionEvent","nativeCreateObjectURL","nativeRevokeObjectURL","newId","dsc","nativeSetAttribute","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","midToString","mlB2UMap","mlU2BMap","candidateToUnifiedPlan","candidateToPlanB","getFirstSendingIndexFromAnswer","rewrite","type2bl","types","directionResult","uLine","rtcpMux","directionMasks","bundleOnly","mids","msidSemantic","semantic","cached","hasBundle","recvonlySsrcs","mid2ul","bIdx","uIdx","bLine","uLineData","iceUfrag","icePwd","ssrc2group","ssrc2ml","related","transformUtils","parseSsrcs","writeSsrcs","DEFAULT_NUM_OF_LAYERS","processVideo","validateDescription","clearSsrcCache","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","TranscriptionService","Word","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","audioBlob","getWord","getBeginTime","getEndTime"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 127);\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * A participant avatar has changed.\n */\nexport const AVATAR_CHANGED = 'conference.avatarChanged';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import EventEmitter from 'events';\n\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport RTPStats from './RTPStatsCollector';\n\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as StatisticsEvents from '../../service/statistics/Events';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl\n                || 'https://api.callstats.io/static/callstats-ws.min.js',\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} callStatsConfIDNamespace - A namespace to prepend the\n * callstats conference ID with.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n\n        if (!this.options.callStatsConfIDNamespace) {\n            logger.warn('\"callStatsConfIDNamespace\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this._getCallStatsConfID(),\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Constructs the CallStats conference ID based on the options currently\n * configured in this instance.\n * @return {string}\n * @private\n */\nStatistics.prototype._getCallStatsConfID = function() {\n    // The conference ID is case sensitive!!!\n    return this.options.callStatsConfIDNamespace\n        ? `${this.options.callStatsConfIDNamespace}/${this.options.roomName}`\n        : this.options.roomName;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this._getCallStatsConfID(), overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function() {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted'\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport RandomUtil from '../util/RandomUtil';\nimport browser from '../browser';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribtue is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by\n     *  moving it to the beginning of the payload types\n     *  list (modifies the given mline in place).  If there\n     *  are multiple options within the same codec (multiple h264\n     *  profiles, for instance), this will prefer the first one\n     *  that is found.\n     * @param {object} videoMLine the video mline object from\n     *  an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferVideoCodec(videoMLine, codecName) {\n        let payloadType = null;\n\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\n            const rtp = videoMLine.rtp[i];\n\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                payloadType = rtp.payload;\n                break;\n            }\n        }\n        if (payloadType) {\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const payloadTypes\n                = videoMLine.payloads\n                    .toString()\n                    .split(' ')\n                    .map(p => parseInt(p, 10));\n            const payloadIndex = payloadTypes.indexOf(payloadType);\n\n            payloadTypes.splice(payloadIndex, 1);\n            payloadTypes.unshift(payloadType);\n            videoMLine.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} videoMLine the video mline object from an sdp as parsed\n     * by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     */\n    stripVideoCodec(videoMLine, codecName) {\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        const removePts = [];\n\n        for (const rtp of videoMLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                removePts.push(rtp.payload);\n            }\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = videoMLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = videoMLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other video codecs, disable the stream.\n                videoMLine.port = 0;\n                videoMLine.direction = 'inactive';\n                videoMLine.payloads = '*';\n            } else {\n                videoMLine.payloads = keepPts.join(' ');\n            }\n\n            videoMLine.rtp = videoMLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            videoMLine.fmtp = videoMLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (videoMLine.rtcpFb) {\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\n\n    IS_SELECTED_CHANGED: 'rtc.is_selected_change',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport screenObtainer from './ScreenObtainer';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        aspectRatio: 16 / 9,\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 240\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nconst SS_DEFAULT_FRAME_RATE = 5;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices;\nlet availableDevicesPollTimer;\n\n/**\n * Initialize wrapper function for enumerating devices.\n * TODO: remove this, it should no longer be needed.\n *\n * @returns {?Function}\n */\nfunction initEnumerateDevicesWithCallback() {\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        return callback => {\n            navigator.mediaDevices.enumerateDevices()\n                .then(callback, () => callback([]));\n        };\n    }\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isSafariWithVP8()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = JSON.parse(JSON.stringify(\n        options.constraints || DEFAULT_CONSTRAINTS));\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        // NOTE(brian): the new-style ('advanced' instead of 'optional')\n        // doesn't seem to carry through the googXXX constraints\n        // Changing back to 'optional' here (even with video using\n        // the 'advanced' style) allows them to be passed through\n        // but also requires the device id to capture to be set in optional\n        // as sourceId otherwise the constraints are considered malformed.\n        if (!constraints.audio.optional) {\n            constraints.audio.optional = [];\n        }\n\n        constraints.audio.optional.push(\n            { sourceId: options.micDeviceId },\n            { echoCancellation: !disableAEC && !disableAP },\n            { googEchoCancellation: !disableAEC && !disableAP },\n            { googAutoGainControl: !disableAGC && !disableAP },\n            { googNoiseSuppression: !disableNS && !disableAP },\n            { googHighpassFilter: !disableHPF && !disableAP },\n            { googNoiseSuppression2: !disableNS && !disableAP },\n            { googEchoCancellation2: !disableAEC && !disableAP },\n            { googAutoGainControl2: !disableAGC && !disableAP }\n        );\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Generates constraints for screen sharing when using getDisplayMedia.\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\n *\n * @returns {Object} - MediaTrackConstraints constraints.\n */\nfunction getTrackSSConstraints(options = {}) {\n    // we used to set height and width in the constraints, but this can lead\n    // to inconsistencies if the browser is on a lower resolution screen\n    // and we share a screen with bigger resolution, so they are now not set\n    const constraints = {\n        frameRate: SS_DEFAULT_FRAME_RATE\n    };\n    const { desktopSharingFrameRate } = options;\n\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\n        constraints.frameRate = desktopSharingFrameRate.max;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info(\n        'list of media devices has changed:',\n        availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\n * source of a video element that tries to be browser-agnostic through feature\n * checking. Note though that it was not completely clear from the predating\n * browser-specific implementations what &quot;videoSrc&quot; was because one\n * implementation of {@link RTCUtils#getVideoSrc} would return\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\n * appear to be used anywhere. Generally, the implementation will try to follow\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\n * properties of the specified <tt>element</tt> taking into account vender\n * prefixes.\n *\n * @param element the element whose video source/src is to be set to the\n * specified <tt>stream</tt>\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\n * source/src of <tt>element</tt>\n */\nfunction defaultSetVideoSrc(element, stream) {\n    // srcObject\n    let srcObjectPropertyName = 'srcObject';\n\n    if (!(srcObjectPropertyName in element)) {\n        srcObjectPropertyName = 'mozSrcObject';\n        if (!(srcObjectPropertyName in element)) {\n            srcObjectPropertyName = null;\n        }\n    }\n    if (srcObjectPropertyName) {\n        element[srcObjectPropertyName] = stream;\n\n        return;\n    }\n\n    // src\n    let src;\n\n    if (stream) {\n        src = stream.jitsiObjectURL;\n\n        // Save the created URL for stream so we can reuse it and not keep\n        // creating URLs.\n        if (!src) {\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\n        }\n    }\n    element.src = src || '';\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n\n        availableDevices = undefined;\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isChromiumBased() // this is chrome < 61\n                || browser.isReactNative()) {\n\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    defaultSetVideoSrc(element, stream);\n\n                    return element;\n                });\n\n            this.getStreamID = function({ id }) {\n                // A. MediaStreams from FF endpoints have the characters '{' and\n                // '}' that make jQuery choke.\n                // B. The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n\n            if (!MediaStream.prototype.getVideoTracks) {\n                MediaStream.prototype.getVideoTracks = function() {\n                    return this.videoTracks;\n                };\n            }\n            if (!MediaStream.prototype.getAudioTracks) {\n                MediaStream.prototype.getAudioTracks = function() {\n                    return this.audioTracks;\n                };\n            }\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this._initPCConstraints(options);\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.splice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n\n                // Use a shared callback to handle both the devicechange event\n                // and the polling implementations. This prevents duplication\n                // and works around a chrome bug (verified to occur on 68) where\n                // devicechange fires twice in a row, which can cause async post\n                // devicechange processing to collide.\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\n                    if (compareAvailableMediaDevices(pds)) {\n                        onMediaDevicesListChanged(pds);\n                    }\n                });\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        updateKnownDevices);\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        updateKnownDevices,\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     * Creates instance objects for peer connection constraints both for p2p\n     * and outside of p2p.\n     *\n     * @params {Object} options - Configuration for setting RTCUtil's instance\n     * objects for peer connection constraints.\n     * @params {boolean} options.useIPv6 - Set to true if IPv6 should be used.\n     * @params {Object} options.testing - Additional configuration for work in\n     * development.\n     * @params {Object} options.testing.forceP2PSuspendVideoRatio - True if\n     * video should become suspended if bandwidth estimation becomes low while\n     * in peer to peer connection mode.\n     */\n    _initPCConstraints(options) {\n        if (browser.isFirefox()) {\n            this.pcConstraints = {};\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\n            this.pcConstraints = { optional: [\n                { googHighStartBitrate: 0 },\n                { googPayloadPadding: true },\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true },\n                { googCpuOveruseEncodeUsage: true },\n                { googCpuUnderuseThreshold: 55 },\n                { googCpuOveruseThreshold: 85 }\n            ] };\n\n            if (options.useIPv6) {\n                // https://code.google.com/p/webrtc/issues/detail?id=2828\n                this.pcConstraints.optional.push({ googIPv6: true });\n            }\n\n            this.p2pPcConstraints\n                = JSON.parse(JSON.stringify(this.pcConstraints));\n        }\n\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const constraints = getConstraints(um, options);\n\n        logger.info('Get media constraints', constraints);\n\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(um, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(um, undefined);\n                    reject(new JitsiTrackError(error, constraints, um));\n                });\n        });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @returns {Promise}\n     */\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(umDevices, undefined);\n                    reject(new JitsiTrackError(error, constraints, umDevices));\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_newGetUserMediaWithConstraints.\n     *\n     * @param {Object} options\n     * @param {Object} options.desktopSharingExtensionExternalInstallation\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return this._getAudioAndVideoStreams(options).then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            ...options.desktopSharingExtensionExternalInstallation,\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            },\n            trackOptions: getTrackSSConstraints(options)\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = options.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = options;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions, trackOptions }\n                    = this._parseDesktopSharingOptions(options);\n\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: matchingDevice.deviceId\n                    }\n                };\n\n                return this._newGetUserMediaWithConstraints(\n                    requestedDevices, constraints)\n                    .then(stream => {\n                        const track = stream && stream.getTracks()[0];\n                        const applyConstrainsPromise\n                            = track && track.applyConstraints\n                                ? track.applyConstraints(trackOptions)\n                                : Promise.resolve();\n\n                        return applyConstrainsPromise\n                            .then(() => {\n                                return {\n                                    sourceType: 'device',\n                                    stream\n                                };\n                            });\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            mediaStreamsMetaData.push({\n                stream,\n                sourceId,\n                sourceType,\n                track: stream.getVideoTracks()[0],\n                videoType: VideoType.DESKTOP\n            });\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = options.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device =>\n                device === 'audio'\n                || (device === 'video' && browser.supportsVideo()));\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, options);\n\n            logger.info('Got media constraints: ', constraints);\n\n            return this._newGetUserMediaWithConstraints(\n                requestedCaptureDevices, constraints);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: options.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: options.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : !browser.isSafariWithVP8();\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n\n        // if we have done createObjectURL, lets clean it\n        const url = mediaStream.jitsiObjectURL;\n\n        if (url) {\n            delete mediaStream.jitsiObjectURL;\n            URL.revokeObjectURL(url);\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport BridgeChannel from './BridgeChannel';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RTCUtils from './RTCUtils';\nimport Statistics from '../statistics/statistics';\nimport TraceablePeerConnection from './TraceablePeerConnection';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter,\n            effects: options.effects\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        // A flag whether we had received that the channel had opened we can\n        // get this flag out of sync if for some reason channel got closed\n        // from server, a desired behaviour so we can see errors when this\n        // happen.\n        // @private\n        // @type {boolean}\n        this._channelOpen = false;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\n         * no user is pinned.\n         * @type {string|null}\n         * @private\n         */\n        this._pinnedEndpoint = null;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n            this._updateAudioOutputForAudioTracks\n        );\n\n        RTCUtils.removeListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            this._onDeviceListChanged\n        );\n\n        this.removeListener(\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener\n        );\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(tracksInfo => {\n            if (usesNewGumFlow) {\n                return _newCreateLocalTracks(tracksInfo);\n            }\n\n            return createLocalTracks(tracksInfo, options);\n        });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(\n            peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            // Mark that channel as opened.\n            this._channelOpen = true;\n\n            // When the channel becomes available, tell the bridge about\n            // video selections so that it can do adaptive simulcast,\n            // we want the notification to trigger even if userJid\n            // is undefined, or null.\n            try {\n                this._channel.sendPinnedEndpointMessage(\n                    this._pinnedEndpoint);\n                this._channel.sendSelectedEndpointsMessage(\n                    this._selectedEndpoints);\n\n                if (typeof this._maxFrameHeight !== 'undefined') {\n                    this._channel.sendReceiverVideoConstraintMessage(\n                        this._maxFrameHeight);\n                }\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    `Cannot send selected(${this._selectedEndpoint})`\n                    + `pinned(${this._pinnedEndpoint})`\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\n                    error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener);\n            this._channelOpenListener = null;\n\n            // If setLastN was invoked before the bridge channel completed\n            // opening, apply the specified value now that the channel\n            // is open. NOTE that -1 is the default value assumed by both\n            // RTC module and the JVB.\n            if (this._lastN !== -1) {\n                this._channel.sendSetLastNMessage(this._lastN);\n            }\n        };\n\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\n            this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n            this._channelOpen = false;\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     * Elects the participant with the given id to be the pinned participant in\n     * order to always receive video for this participant (even when last n is\n     * enabled).\n     * @param {stirng} id The user id.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     */\n    pinEndpoint(id) {\n        // Cache the value if channel is missing, till we open it.\n        this._pinnedEndpoint = id;\n        if (this._channel && this._channelOpen) {\n            this._channel.sendPinnedEndpointMessage(id);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = RTC.getPCConstraints(isP2P);\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        iceConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Returns the current value for \"lastN\" - the amount of videos are going\n     * to be delivered. When set to -1 for unlimited or all available videos.\n     * @return {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\n     * (resource part of the JID). Returns array of removed tracks.\n     *\n     * @param {string} Owner The resource part of the MUC JID.\n     * @returns {JitsiRemoteTrack[]}\n     */\n    removeRemoteTracks(owner) {\n        let removedTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\n\n            removedTracks = removedTracks.concat(pcRemovedTracks);\n        }\n\n        logger.debug(\n            `Removed remote tracks for ${owner}`\n                + ` count: ${removedTracks.length}`);\n\n        return removedTracks;\n    }\n\n    /**\n     *\n     */\n    static getPCConstraints(isP2P) {\n        const pcConstraints\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\n\n        if (!pcConstraints) {\n            return {};\n        }\n\n        return JSON.parse(JSON.stringify(pcConstraints));\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channelOpen = false;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channelOpen) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * Generic error for jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_GENERIC_ERROR\n    = 'gum.chrome_extension_generic_error';\n\n/**\n * An error which indicates that the jidesha extension for Chrome is\n * failed to install.\n */\nexport const CHROME_EXTENSION_INSTALLATION_ERROR\n    = 'gum.chrome_extension_installation_error';\n\n/**\n * This error indicates that the attempt to start screensharing was initiated by\n * a script which did not originate in user gesture handler. It means that\n * you should to trigger the action again in response to a button click for\n * example.\n * @type {string}\n */\nexport const CHROME_EXTENSION_USER_GESTURE_REQUIRED\n    = 'gum.chrome_extension_user_gesture_required';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog in jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_USER_CANCELED\n    = 'gum.chrome_extension_user_canceled';\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * An error which indicates that the jidesha extension for Firefox is\n * needed to proceed with screen sharing, and that it is not installed.\n */\nexport const FIREFOX_EXTENSION_NEEDED = 'gum.firefox_extension_needed';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR]\n    = 'Failed to install Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[\n    JitsiTrackErrors.CHROME_EXTENSION_USER_GESTURE_REQUIRED]\n    = 'Failed to install Chrome extension - installations can only be initiated'\n        + ' by a user gesture.';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED]\n    = 'User canceled Chrome\\'s screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR]\n    = 'Unknown error from Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that the conference setup failed.\n */\nexport const SETUP_FAILED = 'conference.setup_failed';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","/* global $ */\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const self = this;\n    const mediaSSRCs = {};\n    let tmp;\n\n    for (let mediaindex = 0; mediaindex < self.media.length; mediaindex++) {\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc:');\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(self.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n        tmp.forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc-group:');\n        tmp.forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// remove iSAC and CN from SDP\nSDP.prototype.mangle = function() {\n    let i, j, lines, mline, newdesc, rtpmap;\n\n    for (i = 0; i < this.media.length; i++) {\n        lines = this.media[i].split('\\r\\n');\n        lines.pop(); // remove empty last element\n        mline = SDPUtil.parseMLine(lines.shift());\n        if (mline.media !== 'audio') {\n            continue; // eslint-disable-line no-continue\n        }\n        newdesc = '';\n        mline.fmt.length = 0;\n        for (j = 0; j < lines.length; j++) {\n            if (lines[j].substr(0, 9) === 'a=rtpmap:') {\n                rtpmap = SDPUtil.parseRTPMap(lines[j]);\n                if (rtpmap.name === 'CN' || rtpmap.name === 'ISAC') {\n                    continue; // eslint-disable-line no-continue\n                }\n                mline.fmt.push(rtpmap.id);\n            }\n            newdesc += `${lines[j]}\\r\\n`;\n        }\n        this.media[i] = `${SDPUtil.buildMLine(mline)}\\r\\n${newdesc}`;\n    }\n    this.raw = this.session + this.media.join('');\n};\n\n// remove lines matching prefix from session section\nSDP.prototype.removeSessionLines = function(prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.session, prefix);\n\n    lines.forEach(line => {\n        self.session = self.session.replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// remove lines matching prefix from a media section specified by mediaindex\n// TODO: non-numeric mediaindex could match mid\nSDP.prototype.removeMediaLines = function(mediaindex, prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.media[mediaindex], prefix);\n\n    lines.forEach(line => {\n        self.media[mediaindex]\n            = self.media[mediaindex].replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    let i, j, k, lines, mline, rtpmap, ssrc, tmp;\n\n    // new bundle plan\n\n    lines = SDPUtil.findLines(this.session, 'a=group:');\n    if (lines.length) {\n        for (i = 0; i < lines.length; i++) {\n            tmp = lines[i].split(' ');\n            const semantics = tmp.shift().substr(8);\n\n            elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n                semantics });\n            for (j = 0; j < tmp.length; j++) {\n                elem.c('content', { name: tmp[j] }).up();\n            }\n            elem.up();\n        }\n    }\n    for (i = 0; i < this.media.length; i++) {\n        mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (SDPUtil.findLine(this.media[i], 'a=rtpmap:').length) {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (j = 0; j < mline.fmt.length; j++) {\n                rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    tmp = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (k = 0; k < tmp.length; k++) {\n                        elem.c('parameter', tmp[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n            const crypto\n                = SDPUtil.findLines(this.media[i], 'a=crypto:', this.session);\n\n            if (crypto.length) {\n                elem.c('encryption', { required: 1 });\n                crypto.forEach(\n                    line => elem.c('crypto', SDPUtil.parseCrypto(line)).up());\n                elem.up(); // end of encryption\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\n\n            if (ridLines.length) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            lines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n            if (lines.length) {\n                for (j = 0; j < lines.length; j++) {\n                    tmp = SDPUtil.parseExtmap(lines[j]);\n                    elem.c('rtp-hdrext', {\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                        uri: tmp.uri,\n                        id: tmp.value\n                    });\n\n                    // eslint-disable-next-line max-depth\n                    if (tmp.hasOwnProperty('direction')) {\n\n                        // eslint-disable-next-line max-depth\n                        switch (tmp.direction) {\n                        case 'sendonly':\n                            elem.attrs({ senders: 'responder' });\n                            break;\n                        case 'recvonly':\n                            elem.attrs({ senders: 'initiator' });\n                            break;\n                        case 'sendrecv':\n                            elem.attrs({ senders: 'both' });\n                            break;\n                        case 'inactive':\n                            elem.attrs({ senders: 'none' });\n                            break;\n                        }\n                    }\n\n                    // TODO: handle params\n                    elem.up();\n                }\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n        if (mline.port === '0') {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    let tmp;\n    const self = this;\n\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', self.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        tmp = SDPUtil.parseFingerprint(line);\n        tmp.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(tmp.fingerprint);\n        delete tmp.fingerprint;\n\n        // eslint-disable-next-line no-param-reassign\n        line\n            = SDPUtil.findLine(\n                self.media[mediaindex],\n                'a=setup:',\n                self.session);\n        if (line) {\n            tmp.setup = line.substr(8);\n        }\n        elem.attrs(tmp);\n        elem.up(); // end of fingerprint\n    });\n    tmp = SDPUtil.iceparams(this.media[mediaindex], this.session);\n    if (tmp) {\n        tmp.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(tmp);\n\n        // XEP-0176\n        const lines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        if (lines.length) { // add any a=candidate lines\n            lines.forEach(line => {\n                const candidate = SDPUtil.candidateToJingle(line);\n\n                if (self.failICE) {\n                    candidate.ip = '1.1.1.1';\n                }\n                const protocol\n                    = candidate && typeof candidate.protocol === 'string'\n                        ? candidate.protocol.toLowerCase()\n                        : '';\n\n                if ((self.removeTcpCandidates\n                        && (protocol === 'tcp' || protocol === 'ssltcp'))\n                    || (self.removeUdpCandidates && protocol === 'udp')) {\n                    return;\n                }\n                elem.c('candidate', candidate).up();\n            });\n        }\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const tmp = SDPUtil.parseRTCPFB(line);\n\n        if (tmp.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: tmp.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: tmp.type\n            });\n            if (tmp.params.length > 0) {\n                elem.attrs({ 'subtype': tmp.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let media = '';\n    let tmp\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (tmp.length) {\n        media += 'a=rtcp-fb:* trr-int ';\n        if (tmp.attr('value')) {\n            media += tmp.attr('value');\n        } else {\n            media += '0';\n        }\n        media += '\\r\\n';\n    }\n    tmp = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `a=rtcp-fb:${payloadtype} ${$(this).attr('type')}`;\n        if ($(this).attr('subtype')) {\n            media += ` ${$(this).attr('subtype')}`;\n        }\n        media += '\\r\\n';\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const self = this;\n\n    this.raw = 'v=0\\r\\n'\n        + 'o=- 1923518516 2 IN IP4 0.0.0.0\\r\\n'// FIXME\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                self.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each(function() {\n        // eslint-disable-next-line no-invalid-this\n        const m = self.jingle2media($(this));\n\n        self.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('description');\n    let media = '';\n    const self = this;\n    const sctp = content.find(\n        '>transport>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    let tmp = { media: desc.attr('media') };\n\n    tmp.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        tmp.port = '0';\n    }\n    if (content.find('>transport>fingerprint').length\n            || desc.find('encryption').length) {\n        tmp.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        tmp.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        media += `m=application ${tmp.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        media += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            media += ` ${streamCount}\\r\\n`;\n        } else {\n            media += '\\r\\n';\n        }\n    } else {\n        tmp.fmt\n            = desc\n                .find('payload-type')\n                .map(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    return this.getAttribute('id');\n                })\n                .get();\n        media += `${SDPUtil.buildMLine(tmp)}\\r\\n`;\n    }\n\n    media += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        media += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n    tmp\n        = content.find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    if (tmp.length) {\n        if (tmp.attr('ufrag')) {\n            media += `${SDPUtil.buildICEUfrag(tmp.attr('ufrag'))}\\r\\n`;\n        }\n        if (tmp.attr('pwd')) {\n            media += `${SDPUtil.buildICEPwd(tmp.attr('pwd'))}\\r\\n`;\n        }\n        tmp.find('>fingerprint').each(function() {\n            /* eslint-disable no-invalid-this */\n            // FIXME: check namespace at some point\n            media += `a=fingerprint:${this.getAttribute('hash')}`;\n            media += ` ${$(this).text()}`;\n            media += '\\r\\n';\n            if (this.getAttribute('setup')) {\n                media += `a=setup:${this.getAttribute('setup')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    switch (content.attr('senders')) {\n    case 'initiator':\n        media += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        media += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        media += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        media += 'a=sendrecv\\r\\n';\n        break;\n    }\n    media += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('rtcp-mux').length) {\n        media += 'a=rtcp-mux\\r\\n';\n    }\n\n    if (desc.find('encryption').length) {\n        desc.find('encryption>crypto').each(function() {\n            /* eslint-disable no-invalid-this */\n            media += `a=crypto:${this.getAttribute('tag')}`;\n            media += ` ${this.getAttribute('crypto-suite')}`;\n            media += ` ${this.getAttribute('key-params')}`;\n            if (this.getAttribute('session-params')) {\n                media += ` ${this.getAttribute('session-params')}`;\n            }\n            media += '\\r\\n';\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    desc.find('payload-type').each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `${SDPUtil.buildRTPMap(this)}\\r\\n`;\n        if ($(this).find('>parameter').length) {\n            media += `a=fmtp:${this.getAttribute('id')} `;\n            media\n                += $(this)\n                    .find('parameter')\n                    .map(function() {\n                        const name = this.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + this.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            media += '\\r\\n';\n        }\n\n        // xep-0293\n        media += self.rtcpFbFromJingle($(this), this.getAttribute('id'));\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    // xep-0293\n    media += self.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    tmp\n        = desc.find(\n            '>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media\n            += `a=extmap:${this.getAttribute('id')} ${\n                this.getAttribute('uri')}\\r\\n`;\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    content\n        .find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]'\n                + '>candidate')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            let protocol = this.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((self.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (self.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (self.failICE) {\n                this.setAttribute('ip', '1.1.1.1');\n            }\n\n            media += SDPUtil.candidateFromJingle(this);\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    content\n        .find('description>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            const semantics = this.getAttribute('semantics');\n            const ssrcs\n                = $(this)\n                    .find('>source')\n                    .map(function() {\n                        return this.getAttribute('ssrc');\n                    })\n                    .get();\n\n            if (ssrcs.length) {\n                media += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    tmp\n        = content.find(\n            'description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        const ssrc = this.getAttribute('ssrc');\n\n        // eslint-disable-next-line newline-per-chained-call\n        $(this).find('>parameter').each(function() {\n            const name = this.getAttribute('name');\n            let value = this.getAttribute('value');\n\n            value = SDPUtil.filterSpecialChars(value);\n            media += `a=ssrc:${ssrc} ${name}`;\n            if (value && value.length) {\n                media += `:${value}`;\n            }\n            media += '\\r\\n';\n        });\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        if (userAgent.match(/Edg/)) {\n            const version = userAgent.match(/Edg\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","export * from './browser-capabilities';\nexport * from './browser-detection';\nexport * from './avatar';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","\n\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 6\n    },\n    '540': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n    'qhd': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection the the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _callStatsUserName = localStorage.getItem('callStatsUserName');\n            }\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                if (localStorage) {\n                    localStorage.setItem(\n                        'callStatsUserName',\n                        _callStatsUserName);\n                }\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _machineId = localStorage.getItem('jitsiMeetId');\n            }\n            if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                if (localStorage) {\n                    localStorage.setItem('jitsiMeetId', _machineId);\n                }\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        const localStorage = getLocalStorage();\n\n        return localStorage ? localStorage.getItem('sessionId') : undefined;\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        const localStorage = getLocalStorage();\n\n        if (localStorage) {\n            if (sessionId) {\n                localStorage.setItem('sessionId', sessionId);\n            } else {\n                localStorage.removeItem('sessionId');\n            }\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n * Gets the localStorage of the browser. (Technically, gets the localStorage of\n * the global object because there may be no browser but React Native for\n * example).\n * @returns {Storage} the local Storage object (if any)\n */\nfunction getLocalStorage() {\n    let storage;\n\n    try {\n        // eslint-disable-next-line no-invalid-this\n        storage = (window || this).localStorage;\n    } catch (error) {\n        logger.error(error);\n    }\n\n    return storage;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport RandomUtil from '../util/RandomUtil';\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport browser from '../browser';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheUtil from './strophe.util';\nimport PingConnectionPlugin from './strophe.ping';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheLogger from './strophe.logger';\nimport Listenable from '../util/Listenable';\nimport Caps from './Caps';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive }) {\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        if (!this.options.disableRtx && browser.supportsRtx()) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChrome() && this.options.enableLipSync !== false) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n    }\n\n    /**\n     * Returns {@code true} if the PING functionality is supported by the server\n     * or {@code false} otherwise.\n     * @returns {boolean}\n     */\n    isPingSupported() {\n        return this._pingSupported !== false;\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED\n            || status === Strophe.Status.ATTACHED) {\n            if (this.options.useStunTurn\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\n                this.connection.jingle.getStunAndTurnCredentials();\n            }\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            this.lastErrorMsg = undefined;\n\n            // Schedule ping ?\n            const pingJid = this.connection.domain;\n\n            // FIXME no need to do it again on stream resume\n            this.caps.getFeaturesAndIdentities(pingJid)\n                .then(({ features, identities }) => {\n                    if (features.has(Strophe.NS.PING)) {\n                        this._pingSupported = true;\n                        this.connection.ping.startInterval(pingJid);\n                    } else {\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\n                    }\n\n                    // check for speakerstats\n                    identities.forEach(identity => {\n                        if (identity.type === 'speakerstats') {\n                            this.speakerStatsComponentAddress = identity.name;\n                        }\n\n                        if (identity.type === 'conference_duration') {\n                            this.conferenceDurationComponentAddress = identity.name;\n                        }\n                    });\n\n                    if (this.speakerStatsComponentAddress\n                        || this.conferenceDurationComponentAddress) {\n                        this.connection.addHandler(\n                            this._onPrivateMessage.bind(this), null,\n                            'message', null, null);\n                    }\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = this.disconnectInProgress;\n            const errMsg = msg || this.lastErrorMsg;\n\n            this.disconnectInProgress = false;\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg,\n                credentials);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        let roomjid = `${roomName}@${this.options.hosts.muc}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server. Remember to check {@link isPingSupported} before using\n     * this method.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            if (this.isPingSupported()) {\n                this.connection.ping\n                    .ping(this.connection.domain, resolve, reject, timeout);\n            } else {\n                reject('PING operation is not supported by the server');\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress || !this.connection) {\n            this.eventEmitter.emit(JitsiConnectionEvents.WRONG_STATE);\n\n            return Promise.reject(new Error('Wrong connection state!'));\n        }\n\n        this.disconnectInProgress = true;\n\n        return new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n\n            this._cleanupXmppConnection(ev);\n        });\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('ping', new PingConnectionPlugin(this));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastBOSHSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress)) {\n            return;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\n            && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        }\n\n        return true;\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar logDisabled_ = true;\nvar deprecationWarnings_ = true;\n\n// Utility methods.\nvar utils = {\n  disableLog: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    logDisabled_ = bool;\n    return (bool) ? 'adapter.js logging disabled' :\n        'adapter.js logging enabled';\n  },\n\n  /**\n   * Disable or enable deprecation warnings\n   * @param {!boolean} bool set to true to disable warnings.\n   */\n  disableWarnings: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    deprecationWarnings_ = !bool;\n    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n  },\n\n  log: function() {\n    if (typeof window === 'object') {\n      if (logDisabled_) {\n        return;\n      }\n      if (typeof console !== 'undefined' && typeof console.log === 'function') {\n        console.log.apply(console, arguments);\n      }\n    }\n  },\n\n  /**\n   * Shows a deprecation warning suggesting the modern and spec-compatible API.\n   */\n  deprecated: function(oldMethod, newMethod) {\n    if (!deprecationWarnings_) {\n      return;\n    }\n    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n        ' instead.');\n  },\n\n  /**\n   * Extract browser version out of the provided user agent string.\n   *\n   * @param {!string} uastring userAgent string.\n   * @param {!string} expr Regular expression used as match criteria.\n   * @param {!number} pos position in the version string to be returned.\n   * @return {!number} browser version.\n   */\n  extractVersion: function(uastring, expr, pos) {\n    var match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n  },\n\n  /**\n   * Browser detector.\n   *\n   * @return {object} result containing browser and version\n   *     properties.\n   */\n  detectBrowser: function(window) {\n    var navigator = window && window.navigator;\n\n    // Returned result object.\n    var result = {};\n    result.browser = null;\n    result.version = null;\n\n    // Fail early if it's not a browser\n    if (typeof window === 'undefined' || !window.navigator) {\n      result.browser = 'Not a browser.';\n      return result;\n    }\n\n    // Firefox.\n    if (navigator.mozGetUserMedia) {\n      result.browser = 'firefox';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Firefox\\/(\\d+)\\./, 1);\n    } else if (navigator.webkitGetUserMedia) {\n      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now\n      if (window.webkitRTCPeerConnection) {\n        result.browser = 'chrome';\n        result.version = this.extractVersion(navigator.userAgent,\n          /Chrom(e|ium)\\/(\\d+)\\./, 2);\n      } else { // Safari (in an unpublished version) or unknown webkit-based.\n        if (navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)) {\n          result.browser = 'safari';\n          result.version = this.extractVersion(navigator.userAgent,\n            /AppleWebKit\\/(\\d+)\\./, 1);\n        } else { // unknown webkit-based browser.\n          result.browser = 'Unsupported webkit-based browser ' +\n              'with GUM support but no WebRTC support.';\n          return result;\n        }\n      }\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n      result.browser = 'edge';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Edge\\/(\\d+).(\\d+)$/, 2);\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n        // Safari, with webkitGetUserMedia removed.\n      result.browser = 'safari';\n      result.version = this.extractVersion(navigator.userAgent,\n          /AppleWebKit\\/(\\d+)\\./, 1);\n    } else { // Default fallthrough: not supported.\n      result.browser = 'Not a supported browser.';\n      return result;\n    }\n\n    return result;\n  },\n\n};\n\n// Export.\nmodule.exports = {\n  log: utils.log,\n  deprecated: utils.deprecated,\n  disableLog: utils.disableLog,\n  disableWarnings: utils.disableWarnings,\n  extractVersion: utils.extractVersion,\n  shimCreateObjectURL: utils.shimCreateObjectURL,\n  detectBrowser: utils.detectBrowser.bind(utils)\n};\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\nimport { getJitterDelay } from '../util/Retry';\n\nimport LastSuccessTracker from './StropheBoshLastSuccess';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\n        };\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        if (!this._usesWebsocket) {\n            this._lastSuccessTracker = new LastSuccessTracker();\n            this._lastSuccessTracker.startTracking(this._stropheConn);\n        }\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        return this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED;\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED) {\n            this._maybeEnableStreamResume();\n            this._maybeStartWSKeepAlive();\n            this._resumeRetryN = 0;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        this._stropheConn._proto && this._stropheConn._proto.socket && this._stropheConn._proto.socket.close();\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        clearTimeout(this._resumeTimeout);\n        clearTimeout(this._wsKeepAlive);\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastBOSHSuccess() {\n        return this._lastSuccessTracker\n            ? this._lastSuccessTracker.getTimeSinceLastSuccess()\n            : null;\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(() => {\n                const url = this.service.replace('wss', 'https').replace('ws', 'http');\n\n                fetch(url).catch(\n                    error => {\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n                    })\n                    .then(() => this._maybeStartWSKeepAlive());\n            }, intervalWithJitter);\n        }\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            `https:${this.service}`,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            clearTimeout(this._resumeTimeout);\n\n            // FIXME detect internet offline\n            // The retry delay will be:\n            //   1st retry: 1.5s - 3s\n            //   2nd retry: 3s - 9s\n            //   3rd retry: 3s - 27s\n            this._resumeRetryN = Math.min(3, this._resumeRetryN + 1);\n            const retryTimeout = getJitterDelay(this._resumeRetryN, 1500, 3);\n\n            logger.info(`Will try to resume the XMPP connection in ${retryTimeout}ms`);\n\n            this._resumeTimeout = setTimeout(() => {\n                logger.info('Trying to resume the XMPP connection');\n\n                const url = new URL(this._stropheConn.service);\n\n                url.searchParams.set('previd', resumeToken);\n\n                this._stropheConn.service = url.toString();\n\n                streamManagement.resume();\n            }, retryTimeout);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* global chrome, $, alert */\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\n/**\n * Indicates whether the Chrome desktop sharing extension is installed.\n * @type {boolean}\n */\nlet chromeExtInstalled = false;\n\n/**\n * Indicates whether an update of the Chrome desktop sharing extension is\n * required.\n * @type {boolean}\n */\nlet chromeExtUpdateRequired = false;\n\nlet gumFunction = null;\n\n/**\n * The error message returned by chrome when the extension is installed.\n */\nconst CHROME_NO_EXTENSION_ERROR_MSG // eslint-disable-line no-unused-vars\n    = 'Could not establish connection. Receiving end does not exist.';\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n    intChromeExtPromise: null,\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {boolean} [options.desktopSharingChromeDisabled]\n     * @param {boolean} [options.desktopSharingChromeExtId]\n     * @param {boolean} [options.desktopSharingFirefoxDisabled]\n     * @param {Function} gum GUM method\n     */\n    init(options = {\n        desktopSharingChromeDisabled: false,\n        desktopSharingChromeExtId: null,\n        desktopSharingFirefoxDisabled: false\n    }, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod(options);\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @param {object} options passed from {@link init} - check description\n     * there\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod(options) {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isChrome() || browser.isOpera()) {\n            if (browser.supportsGetDisplayMedia()\n                    && !options.desktopSharingChromeDisabled) {\n\n                return this.obtainScreenFromGetDisplayMedia;\n            } else if (options.desktopSharingChromeDisabled\n                || !options.desktopSharingChromeExtId) {\n\n                return null;\n            }\n\n            logger.info('Using Chrome extension for desktop sharing');\n            this.intChromeExtPromise\n                = initChromeExtension(options).then(() => {\n                    this.intChromeExtPromise = null;\n                });\n\n            return this.obtainScreenFromExtension;\n        } else if (browser.isFirefox()) {\n            if (options.desktopSharingFirefoxDisabled) {\n                return null;\n            } else if (browser.supportsGetDisplayMedia()) {\n                // Firefox 66 support getDisplayMedia\n                return this.obtainScreenFromGetDisplayMedia;\n            }\n\n            // Legacy Firefox\n            return this.obtainScreenOnFirefox;\n        }\n\n        logger.log(\n            'Screen sharing not supported by the current browser: ',\n            browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Firefox.\n     * @param callback\n     * @param errorCallback\n     */\n    obtainScreenOnFirefox(options, callback, errorCallback) {\n        obtainWebRTCScreen(options.gumOptions, callback, errorCallback);\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources\n                        || this.options.desktopSharingChromeSources\n                },\n                (streamId, streamType) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Asks Chrome extension to call chooseDesktopMedia and gets chrome\n     * 'desktop' stream for returned stream token.\n     */\n    obtainScreenFromExtension(options, streamCallback, failCallback) {\n        if (this.intChromeExtPromise !== null) {\n            this.intChromeExtPromise.then(() => {\n                this.obtainScreenFromExtension(\n                    options, streamCallback, failCallback);\n            });\n\n            return;\n        }\n\n        const {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources\n        } = this.options;\n\n        const {\n            gumOptions\n        } = options;\n\n        const doGetStreamFromExtensionOptions = {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources:\n                options.desktopSharingSources || desktopSharingChromeSources,\n            gumOptions\n        };\n\n        if (chromeExtInstalled) {\n            doGetStreamFromExtension(\n                doGetStreamFromExtensionOptions,\n                streamCallback,\n                failCallback);\n        } else {\n            if (chromeExtUpdateRequired) {\n                /* eslint-disable no-alert */\n                alert(\n                    'Jitsi Desktop Streamer requires update. '\n                    + 'Changes will take effect after next Chrome restart.');\n\n                /* eslint-enable no-alert */\n            }\n\n            this.handleExternalInstall(options, streamCallback,\n                failCallback);\n        }\n    },\n\n    /* eslint-disable max-params */\n\n    handleExternalInstall(options, streamCallback, failCallback, e) {\n        const webStoreInstallUrl = getWebStoreInstallUrl(this.options);\n\n        options.listener('waitingForExtension', webStoreInstallUrl);\n        this.checkForChromeExtensionOnInterval(options, streamCallback,\n            failCallback, e);\n    },\n\n    /* eslint-enable max-params */\n\n    checkForChromeExtensionOnInterval(options, streamCallback, failCallback) {\n        if (options.checkAgain() === false) {\n            failCallback(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR));\n\n            return;\n        }\n        waitForExtensionAfterInstall(this.options, options.interval, 1)\n            .then(() => {\n                chromeExtInstalled = true;\n                options.listener('extensionFound');\n                this.obtainScreenFromExtension(options,\n                    streamCallback, failCallback);\n            })\n            .catch(() => {\n                this.checkForChromeExtensionOnInterval(options,\n                    streamCallback, failCallback);\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        getDisplayMedia({ video: true })\n            .then(stream => {\n                let applyConstraintsPromise;\n\n                if (stream\n                    && stream.getTracks()\n                    && stream.getTracks().length > 0) {\n                    applyConstraintsPromise = stream.getTracks()[0]\n                        .applyConstraints(options.trackOptions);\n                } else {\n                    applyConstraintsPromise = Promise.resolve();\n                }\n\n                applyConstraintsPromise.then(() =>\n                    callback({\n                        stream,\n                        sourceId: stream.id\n                    }));\n            })\n            .catch(() =>\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .CHROME_EXTENSION_USER_CANCELED)));\n    }\n};\n\n/**\n * Obtains a desktop stream using getUserMedia.\n * For this to work on Chrome, the\n * 'chrome://flags/#enable-usermedia-screen-capture' flag must be enabled.\n *\n * On firefox, the document's domain must be white-listed in the\n * 'media.getusermedia.screensharing.allowed_domains' preference in\n * 'about:config'.\n */\nfunction obtainWebRTCScreen(options, streamCallback, failCallback) {\n    gumFunction([ 'screen' ], options)\n        .then(stream => streamCallback({ stream }), failCallback);\n}\n\n/**\n * Constructs inline install URL for Chrome desktop streaming extension.\n * The 'chromeExtensionId' must be defined in options parameter.\n * @param options supports \"desktopSharingChromeExtId\"\n * @returns {string}\n */\nfunction getWebStoreInstallUrl(options) {\n    return (\n        `https://chrome.google.com/webstore/detail/${\n            options.desktopSharingChromeExtId}`);\n}\n\n/**\n * Checks whether an update of the Chrome extension is required.\n * @param minVersion minimal required version\n * @param extVersion current extension version\n * @returns {boolean}\n */\nfunction isUpdateRequired(minVersion, extVersion) {\n    try {\n        const s1 = minVersion.split('.');\n        const s2 = extVersion.split('.');\n\n        const len = Math.max(s1.length, s2.length);\n\n        for (let i = 0; i < len; i++) {\n            let n1 = 0,\n                n2 = 0;\n\n            if (i < s1.length) {\n                n1 = parseInt(s1[i], 10);\n            }\n            if (i < s2.length) {\n                n2 = parseInt(s2[i], 10);\n            }\n\n            if (isNaN(n1) || isNaN(n2)) {\n                return true;\n            } else if (n1 !== n2) {\n                return n1 > n2;\n            }\n        }\n\n        // will happen if both versions have identical numbers in\n        // their components (even if one of them is longer, has more components)\n        return false;\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error('Failed to parse extension version', e);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param callback\n * @param options\n */\nfunction checkChromeExtInstalled(callback, options) {\n    if (typeof chrome === 'undefined' || !chrome || !chrome.runtime) {\n        // No API, so no extension for sure\n        callback(false, false);\n\n        return;\n    }\n    chrome.runtime.sendMessage(\n        options.desktopSharingChromeExtId,\n        { getVersion: true },\n        response => {\n            if (!response || !response.version) {\n                // Communication failure - assume that no endpoint exists\n                logger.warn(\n                    'Extension not installed?: ', chrome.runtime.lastError);\n                callback(false, false);\n\n                return;\n            }\n\n            // Check installed extension version\n            const extVersion = response.version;\n\n            logger.log(`Extension version is: ${extVersion}`);\n            const updateRequired\n                = isUpdateRequired(\n                    options.desktopSharingChromeMinExtVersion,\n                    extVersion);\n\n            callback(!updateRequired, updateRequired);\n        }\n    );\n}\n\n/**\n *\n * @param options\n * @param streamCallback\n * @param failCallback\n */\nfunction doGetStreamFromExtension(options, streamCallback, failCallback) {\n    const {\n        desktopSharingChromeSources,\n        desktopSharingChromeExtId,\n        gumOptions\n    } = options;\n\n    // Sends 'getStream' msg to the extension.\n    // Extension id must be defined in the config.\n    chrome.runtime.sendMessage(\n        desktopSharingChromeExtId,\n        {\n            getStream: true,\n            sources: desktopSharingChromeSources\n        },\n        response => {\n            if (!response) {\n                // possibly re-wraping error message to make code consistent\n                const lastError = chrome.runtime.lastError;\n\n                failCallback(lastError instanceof Error\n                    ? lastError\n                    : new JitsiTrackError(\n                        JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n                        lastError));\n\n                return;\n            }\n            logger.log('Response from extension: ', response);\n            onGetStreamResponse(\n                {\n                    response,\n                    gumOptions\n                },\n                streamCallback,\n                failCallback\n            );\n        }\n    );\n}\n\n/**\n * Initializes <link rel=chrome-webstore-item /> with extension id set in\n * config.js to support inline installs. Host site must be selected as main\n * website of published extension.\n * @param options supports \"desktopSharingChromeExtId\"\n */\nfunction initInlineInstalls(options) {\n    if ($('link[rel=chrome-webstore-item]').length === 0) {\n        $('head').append('<link rel=\"chrome-webstore-item\">');\n    }\n    $('link[rel=chrome-webstore-item]').attr('href',\n        getWebStoreInstallUrl(options));\n}\n\n/**\n *\n * @param options\n *\n * @return {Promise} - a Promise resolved once the initialization process is\n * finished.\n */\nfunction initChromeExtension(options) {\n    // Initialize Chrome extension inline installs\n    initInlineInstalls(options);\n\n    return new Promise(resolve => {\n        // Check if extension is installed\n        checkChromeExtInstalled((installed, updateRequired) => {\n            chromeExtInstalled = installed;\n            chromeExtUpdateRequired = updateRequired;\n            logger.info(\n                `Chrome extension installed: ${\n                    chromeExtInstalled} updateRequired: ${\n                    chromeExtUpdateRequired}`);\n            resolve();\n        }, options);\n    });\n}\n\n/**\n * Checks \"retries\" times on every \"waitInterval\"ms whether the ext is alive.\n * @param {Object} options the options passed to ScreanObtainer.obtainStream\n * @param {int} waitInterval the number of ms between retries\n * @param {int} retries the number of retries\n * @returns {Promise} returns promise that will be resolved when the extension\n * is alive and rejected if the extension is not alive even after \"retries\"\n * checks\n */\nfunction waitForExtensionAfterInstall(options, waitInterval, retries) {\n    if (retries === 0) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        let currentRetries = retries;\n        const interval = window.setInterval(() => {\n            checkChromeExtInstalled(installed => {\n                if (installed) {\n                    window.clearInterval(interval);\n                    resolve();\n                } else {\n                    currentRetries--;\n                    if (currentRetries === 0) {\n                        reject();\n                        window.clearInterval(interval);\n                    }\n                }\n            }, options);\n        }, waitInterval);\n    });\n}\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.rtc.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","/* global __filename, $ */\n\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\nimport { integerHash } from '../util/StringUtils';\n\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} testing.enableFirefoxSimulcast - Described in the\n * config.js[1].\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\n\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264);\n            pcOptions.preferH264 = options.preferH264;\n            pcOptions.enableFirefoxSimulcast\n                = options.testing && options.testing.enableFirefoxSimulcast;\n            pcOptions.enableLayerSuspension = options.enableLayerSuspension;\n\n            // disable simulcast for screenshare and set the max bitrate to\n            // 500Kbps if the testing flag is present in config.js.\n            if (options.testing\n                && options.testing.capScreenshareBitrate\n                && typeof options.testing.capScreenshareBitrate === 'number') {\n                pcOptions.capScreenshareBitrate\n                    = Math.random()\n                    < options.testing.capScreenshareBitrate;\n\n                // add the capScreenshareBitrate to the permanent properties so\n                // that it's included with every event that we send to the\n                // analytics backend.\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n            }\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been\n                // restored.\n                if (this.peerconnection.signalingState === 'stable') {\n                    if (this.isReconnect) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n        this.peerconnection.onnegotiationneeded = () => {\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n\n        if (!this.isP2P && options.enableLayerSuspension) {\n            // If this is the bridge session, we'll listen for\n            // IS_SELECTED_CHANGED events and notify the peer connection\n            this.rtc.addListener(RTCEvents.IS_SELECTED_CHANGED,\n                isSelected => {\n                    this.peerconnection.setIsSelected(isSelected);\n                    logger.info('Doing local O/A due to '\n                        + 'IS_SELECTED_CHANGED event');\n                    this.modificationQueue.push(finishedCallback => {\n                        this._renegotiate()\n                            .then(finishedCallback)\n                            .catch(finishedCallback);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && !this.lasticecandidate) {\n            const ice\n                = SDPUtil.iceparams(\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    // start 20ms callout\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, 20);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ(\n            sessionInfo,\n            null,\n            this.newJingleErrorHandler(sessionInfo),\n            /*\n             * This message will be often sent when there are connectivity\n             * issues, so make it slightly longer than Prosody's default BOSH\n             * inactivity timeout of 60 seconds.\n             */ 65);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            for (const localTrack of localTracks) {\n                this.peerconnection.addTrack(localTrack);\n            }\n            this.peerconnection.createOffer(this.mediaConstraints)\n                .then(offerSdp => {\n                    this.peerconnection.setLocalDescription(offerSdp)\n                        .then(() => {\n                            // NOTE that the offer is obtained from\n                            // the localDescription getter as it needs to go\n                            // though the transformation chain.\n                            this.sendSessionInitiate(\n                                this.peerconnection.localDescription.sdp);\n                            finishedCallback();\n                        }, error => {\n                            logger.error(\n                                'Failed to set local SDP', error, offerSdp);\n                            finishedCallback(error);\n                        });\n                }, error => {\n                    logger.error(\n                        'Failed to create an offer',\n                        error,\n                        this.mediaConstraints);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('invite error', error);\n                } else {\n                    logger.debug('invite executed - OK');\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\n        const workFunction = finishedCallback => {\n\n            if (localTracks) {\n                for (const track of localTracks) {\n                    this.peerconnection.addTrack(track);\n                }\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        if (this.isP2P && !this._localVideoActive) {\n                            this.sendContentModify(this._localVideoActive);\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n\n                    finishedCallback();\n                }, error => {\n                    logger.error(\n                        `Error renegotiating after setting new remote ${\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\n                        newRemoteSdp);\n\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                error ? failure(error) : success();\n            });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media.\n     * @param {boolean} videoTransferActive <tt>false</tt> to let the other peer\n     * know that we're not sending nor interested in receiving video contents.\n     * When set to <tt>true</tt> remote peer will be asked to resume video\n     * transfer.\n     * @private\n     */\n    sendContentModify(videoTransferActive) {\n        const newSendersValue = videoTransferActive ? 'both' : 'none';\n\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders: newSendersValue\n                });\n\n        logger.info(\n            `Sending content-modify, video senders: ${newSendersValue}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success');\n\n            if (options && options.reasonDescription) {\n                sessionTerminate.up()\n                    .c('text')\n                    .t(options.reasonDescription);\n            }\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info('Sending SSRC update on reconnect');\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            lines.forEach(line => {\n                remoteSdp.media[idx]\n                    = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n            });\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        if (this.peerconnection.signalingState === 'have-local-offer') {\n            // Skip createOffer and setLocalDescription or FF will fail\n            logger.debug(\n                'Renegotiate: setting remote description');\n\n            /* eslint-disable arrow-body-style */\n\n            return this.peerconnection.setRemoteDescription(remoteDescription)\n                .then(() => {\n                    // In case when the answer is being set for the first time,\n                    // full sRD/sLD cycle is required to have the local\n                    // description updated and SSRCs synchronized correctly.\n                    // Otherwise SSRCs for streams added after invite, but\n                    // before the answer was accepted will not be detected.\n                    // The reason for that is that renegotiate can not be called\n                    // when adding tracks and they will not be reflected in\n                    // the local SDP.\n                    return this._initiatorRenegotiate(remoteDescription);\n                });\n            /* eslint-enable arrow-body-style */\n        }\n\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces the existing mediaStream on the underlying peerconnection with the newly\n     * added stream on the same JitsiLocalTrack wihtout the need to perform a offer/answer\n     * cycle.\n     * @param {JitsiLocalTrack} track - the current track in use whose media stream has been\n     * updated.\n     * @returns {Promise} which resolves once the replacement is complete or reject with an\n     * error {string}.\n     */\n    replaceTrackWithoutOfferAnswer(track) {\n        return this.peerconnection.replaceTrackWithoutOfferAnswer(track);\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            // NOTE the code below assumes that no more than 1 video track\n            // can be added to the peer connection.\n            // Transition from camera to desktop share\n            // or transition from one camera source to another.\n            if (this.peerconnection.options.capScreenshareBitrate\n                && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                // Clearing current primary SSRC will make\n                // the SdpConsistency generate a new one which will result\n                // with:\n                // 1. source-remove for the old video stream.\n                // 2. source-add for the new video stream.\n                this.peerconnection.clearRecvonlySsrc();\n            }\n\n            // Transition from no video to video (unmute).\n            if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                // Clearing current primary SSRC will make\n                // the SdpConsistency generate a new one which will result\n                // with:\n                // 1. source-remove for the recvonly\n                // 2. source-add for the new video stream\n                this.peerconnection.clearRecvonlySsrc();\n\n            // Transition from video to no video\n            } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                // Clearing current primary SSRC and generating the recvonly\n                // will result in:\n                // 1. source-remove for the old video stream\n                // 2. source-add for the recvonly stream\n                this.peerconnection.clearRecvonlySsrc();\n                this.peerconnection.generateRecvonlySsrc();\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n            .then(shouldRenegotiate => {\n                if (shouldRenegotiate\n                    && (oldTrack || newTrack)\n                    && this.state === JingleSessionState.ACTIVE) {\n                    this._renegotiate()\n                        .then(() => {\n                            const newLocalSDP\n                                = new SDP(\n                                    this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(\n                                new SDP(oldLocalSdp), newLocalSDP);\n\n                            // configure max bitrate only when media is routed\n                            // through JVB. For p2p case, browser takes care of\n                            // adjusting the uplink based on the feedback it\n                            // gets from the peer.\n                            if (newTrack && !this.isP2P) {\n                                this.peerconnection.setMaxBitRate(newTrack);\n                            }\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                } else {\n                    finishedCallback();\n                }\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error('Replace track error:', error);\n                        reject(error);\n                    } else {\n                        logger.info('Replace track done!');\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track);\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const tpcOperation\n                = isMute\n                    ? tpc.removeTrackMute.bind(tpc, track)\n                    : tpc.addTrackUnmute.bind(tpc, track);\n\n            if (!tpcOperation()) {\n                finishedCallback(`${operationName} failed!`);\n            } else if (!oldLocalSDP || !tpc.remoteDescription.sdp) {\n                finishedCallback();\n            } else {\n                this._renegotiate()\n                    .then(() => {\n                        // The results are ignored, as this check failure is not\n                        // enough to fail the whole operation. It will log\n                        // an error inside.\n                        this._verifyNoSSRCChanged(\n                            operationName, new SDP(oldLocalSDP));\n                        finishedCallback();\n                    },\n                    finishedCallback /* will be called with an error */);\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify(videoActive);\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(\n            `${this} queued \"content-modify\" task`\n                + `(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('\"content-modify\" failed', error);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n        });\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n\n    const self = this;\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            if (audioLevel !== self.audioLevel) {\n                self.audioLevel = animateLevel(audioLevel, self.audioLevel);\n                self.callback(self.audioLevel);\n            }\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Adds onended/oninactive handler to a MediaStream.\n * @param mediaStream a MediaStream to attach onended/oninactive handler\n * @param handler the handler\n */\nfunction addMediaStreamInactiveHandler(mediaStream, handler) {\n    mediaStream.oninactive = handler;\n}\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            addMediaStreamInactiveHandler(this.stream, undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                addMediaStreamInactiveHandler(\n                    this.stream, this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        if (this.audioLevel !== audioLevel) {\n            this.audioLevel = audioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel,\n                tpc);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.versionToCapabilities = Object.create(null);\n        this.jidToVersion = Object.create(null);\n        this.version = '';\n        this.rooms = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\n\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    addFeature(feature, submit = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    removeFeature(feature, submit = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Returns a set with the features for a participant.\n     * @param {String} jid the jid of the participant\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(jid, timeout = 5000) {\n        const user\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\n\n        if (!user || !(user.version in this.versionToCapabilities)) {\n            const node = user ? `${user.node}#${user.version}` : null;\n\n            return this._getDiscoInfo(jid, node, timeout)\n                .then(({ features, identities }) => {\n                    if (user) {\n                        const sha = generateSha(\n                            Array.from(identities),\n                            Array.from(features)\n                        );\n                        const receivedNode = `${user.node}#${sha}`;\n\n                        if (receivedNode === node) {\n                            this.versionToCapabilities[receivedNode] = features;\n\n                            return features;\n                        }\n\n                        // Check once if it has been cached asynchronously.\n                        if (this.versionToCapabilities[receivedNode]) {\n                            return this.versionToCapabilities[receivedNode];\n                        }\n\n                        logger.error(`Expected node ${node} but received ${\n                            receivedNode}`);\n\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\n                    }\n                });\n        }\n\n        return Promise.resolve(this.versionToCapabilities[user.version]);\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, timeout = 5000) {\n        return this._getDiscoInfo(jid, null, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                const features = new Set();\n                const identities = new Set();\n\n                $(response)\n                    .find('>query>feature')\n                    .each(\n                        (_, el) => features.add(el.getAttribute('var')));\n                $(response)\n                    .find('>query>identity')\n                    .each(\n                        (_, el) => identities.add({\n                            type: el.getAttribute('type'),\n                            name: el.getAttribute('name'),\n                            category: el.getAttribute('category')\n                        }));\n                resolve({\n                    features,\n                    identities });\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n        this._fixChatRoomPresenceMap(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addToPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n\n    /**\n     * Parses the \"c\" xml node from presence.\n     * @param {DOMElement} stanza the presence packet\n     */\n    _handleCaps(stanza) {\n        const from = stanza.getAttribute('from');\n        const caps = stanza.querySelector('c');\n        const version = caps.getAttribute('ver');\n        const node = caps.getAttribute('node');\n        const oldVersion = this.jidToVersion[from];\n\n        this.jidToVersion[from] = { version,\n            node };\n        if (oldVersion && oldVersion.version !== version) {\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n                from);\n        }\n\n        // return true to not remove the handler from Strophe\n        return true;\n    }\n\n    /**\n     * Removes entry from this.jidToVersion map.\n     * @param {String} jid the jid to be removed.\n     */\n    _removeJidToVersionEntry(jid) {\n        if (jid in this.jidToVersion) {\n            delete this.jidToVersion[jid];\n        }\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\n\nimport { createAudioContext } from './webaudio/WebAudioUtils';\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport JitsiTrack from './JitsiTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCUtils from './RTCUtils';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        if (this.isMuted()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // For firefox/safari, replace the stream without doing a offer answer with the remote peer.\n        if (browser.supportsRtpSender()) {\n            this._switchStreamEffect(effect);\n\n            return conference.replaceTrackWithoutOfferAnswer(this)\n                .then(() => {\n                    this._setEffectInProgress = false;\n                })\n                .catch(error => {\n                    this._setEffectInProgress = false;\n                    this._switchStreamEffect();\n                    logger.error('Failed to switch to the new stream!', error);\n                    throw error;\n                });\n        }\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n            if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        this._switchStreamEffect();\n\n        let promise = Promise.resolve();\n\n        if (this.conference) {\n            promise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.start();\n        this._isVADEmitterRunning = true;\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.stop();\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the creator's jid of the session.\n     * @param {JitsiParticipant} participant - The creator of the session.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the jid of the participant that stopped the session.\n     * @param {JitsiParticipant} participant  - The participant's jid,\n     * that stopped the session.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as MediaType from './service/RTC/MediaType';\nimport browser from './modules/browser';\nimport RTC from './modules/RTC/RTC';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport Statistics from './modules/statistics/statistics';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._grantedPermissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n        RTC.addListener(\n            RTCEvents.GRANTED_PERMISSIONS,\n            grantedPermissions =>\n                this._handleGrantedPermissions(grantedPermissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and\n        // 'microphone' permissions are implemented. (Testing for at least one\n        // of them seems sufficient).\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(() => resolve(true), () => resolve(false));\n        });\n    }\n\n    /**\n     * Updated the local granted permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} grantedPermissions - Array with the permissions\n     * which were granted.\n     */\n    _handleGrantedPermissions(grantedPermissions) {\n        this._grantedPermissions = {\n            ...this._grantedPermissions,\n            ...grantedPermissions\n        };\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._grantedPermissions) {\n                resolve(this._grantedPermissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        // The status attribute is deprecated, and state\n                        // should be used instead, but check both for now\n                        // for backwards compatibility.\n                        const grantStatus = permissionStatus.state\n                            || permissionStatus.status;\n\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices && availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // Defer to the browser capabilities to allow exposure of the api to the\n        // consumer but prevent other files from having to import\n        // JitsiMediaDevices.\n        return browser.supportsVideo();\n    }\n}\n\nexport default new JitsiMediaDevices();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = createEmptyStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * Creates a empty MediaStream object which can be used\n * to add MediaStreamTracks to\n * @returns MediaStream\n */\nfunction createEmptyStream() {\n    if (typeof MediaStream !== 'undefined') {\n        return new MediaStream();\n    }\n    throw new Error('cannot create a clean mediaStream');\n}\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} eventEmitter EventEmitter instance.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError(\n                'At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError(\n                'Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        const jsonObject = {\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        };\n\n        this._send(jsonObject);\n        logger.log(`Channel lastN set to: ${value}`);\n    }\n\n    /**\n     * Sends a \"pinned endpoint changed\" message via the channel.\n     * @param {string} endpointId The id of the pinned endpoint.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendPinnedEndpointMessage(endpointId) {\n        logger.log(\n            'sending pinned changed notification to the bridge for endpoint ',\n            endpointId);\n\n        this._send({\n            colibriClass: 'PinnedEndpointChangedEvent',\n            pinnedEndpoint: endpointId || null\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(\n            'sending selected changed notification to the bridge for endpoints',\n            endpointIds);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log('sending a ReceiverVideoConstraint message with '\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to parse channel message as JSON: ',\n                    data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                // Endpoint ID from the Videobridge.\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\n\n                logger.info(\n                    'Channel new dominant speaker event: ',\n                    dominantSpeakerEndpoint);\n                emitter.emit(\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\n                    dominantSpeakerEndpoint);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(\n                    `Endpoint connection status changed: ${endpoint} active ? ${\n                        isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n                    endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\n                    obj.msgPayload);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs.\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info('Channel new last-n event: ',\n                    lastNEndpoints, obj);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                    lastNEndpoints, obj);\n\n                break;\n            }\n            case 'SelectedUpdateEvent': {\n                const isSelected = obj.isSelected;\n\n                logger.info(`SelectedUpdateEvent isSelected? ${isSelected}`);\n                emitter.emit(RTCEvents.IS_SELECTED_CHANGED, isSelected);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","import { getLogger } from 'jitsi-meet-logger';\nimport { BrowserDetection } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports native webrtc.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithWebrtc() {\n        return this.isSafari()\n            && !this.isVersionLessThan('11');\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports VP8.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithVP8() {\n        return this.isSafari()\n            && !this.isVersionLessThan('12.1');\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return this.isChromiumBased()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return (this.isFirefox() && this.isVersionLessThan('68')) || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks whether the browser supports RTPSender.\n     *\n     * @returns {boolean}\n     */\n    supportsRtpSender() {\n        return this.isFirefox() || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks whether the browser supports RTX.\n     *\n     * @returns {boolean}\n     */\n    supportsRtx() {\n        return !this.isFirefox() && !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Whether jitsi-meet supports simulcast on the current browser.\n     * @returns {boolean}\n     */\n    supportsSimulcast() {\n        return this.isChromiumBased() || this.isFirefox()\n            || this.isSafariWithVP8() || this.isReactNative();\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // FIXME: Check if we can use supportsVideoOut and supportsVideoIn. I\n        // leave the old implementation here in order not to brake something.\n\n        // Older versions of Safari using webrtc/adapter do not support video\n        // due in part to Safari only supporting H264 and the bridge sending VP8\n        // Newer Safari support VP8 and other WebRTC features.\n        return !this.isSafariWithWebrtc()\n            || (this.isSafariWithVP8() && this.usesPlanB());\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox()) {\n            return true;\n        }\n\n        if (this.isSafariWithVP8() && typeof window.RTCRtpTransceiver !== 'undefined') {\n            // eslint-disable-next-line max-len\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n            // eslint-disable-next-line no-undef\n            return Object.keys(RTCRtpTransceiver.prototype)\n                   .indexOf('currentDirection') > -1;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        const REQUIRED_CHROME_VERSION = 61;\n\n        if (this.isChrome()) {\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\n        }\n\n        if (this.isFirefox() || this.isSafariWithWebrtc()) {\n            return true;\n        }\n\n        if (this.isChromiumBased()) {\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow and Edge.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow();\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import browser from '../browser';\nimport { browsers } from 'js-utils';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\n * reported by RTCPeerConnection#getStats mapped by browser.\n */\nconst KEYS_BY_BROWSER_TYPE = {};\n\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsLost': 'packetsLost',\n    'packetsSent': 'packetsSent',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'framerateMean': 'framerateMean',\n    'ip': 'ipAddress',\n    'port': 'portNumber',\n    'protocol': 'transport'\n};\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'googRemoteAddress',\n    'transportType': 'googTransportType',\n    'localAddress': 'googLocalAddress',\n    'activeConnection': 'googActiveConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'googFrameHeightReceived',\n    'googFrameWidthReceived': 'googFrameWidthReceived',\n    'googFrameHeightSent': 'googFrameHeightSent',\n    'googFrameWidthSent': 'googFrameWidthSent',\n    'googFrameRateReceived': 'googFrameRateReceived',\n    'googFrameRateSent': 'googFrameRateSent',\n    'audioInputLevel': 'audioInputLevel',\n    'audioOutputLevel': 'audioOutputLevel',\n    'currentRoundTripTime': 'googRtt',\n    'remoteCandidateType': 'googRemoteCandidateType',\n    'localCandidateType': 'googLocalCandidateType',\n    'ip': 'ip',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(\n        peerconnection,\n        audioLevelsInterval,\n        statsInterval,\n        eventEmitter) {\n    // StatsCollector depends entirely on the format of the reports returned by\n    // RTCPeerConnection#getStats. Given that the value of\n    // browser#getName() is very unlikely to change at runtime, it\n    // makes sense to discover whether StatsCollector supports the executing\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\n    // needlessly check a \"static\" condition multiple times very very often and\n    // (2) the lack of support for the executing browser would be discovered and\n    // reported multiple times very very often too late in the execution in some\n    // totally unrelated callback.\n    /**\n     * The browser type supported by this StatsCollector. In other words, the\n     * type of the browser which initialized this StatsCollector\n     * instance.\n     * @private\n     */\n    this._browserType = browser.getName();\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\n\n    if (!keys) {\n        // eslint-disable-next-line no-throw-literal\n        throw `The browser type '${this._browserType}' isn't supported!`;\n    }\n\n    /**\n     * Whether to use the Promise-based getStats API or not.\n     * @type {boolean}\n     */\n    this._usesPromiseGetStats\n        = browser.isSafariWithWebrtc() || browser.isFirefox();\n\n    /**\n     * The function which is to be used to retrieve the value associated in a\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\n     * browser-agnostic name/key.\n     *\n     * @function\n     * @private\n     */\n    this._getStatValue\n        = this._usesPromiseGetStats\n            ? this._defineNewGetStatValueMethod(keys)\n            : this._defineGetStatValueMethod(keys);\n\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/* eslint-enable max-params */\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    const self = this;\n\n    if (startAudioLevelStats) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            results = report;\n                        } else {\n                            results = report.result();\n                        }\n                        self.currentAudioLevelsReport = results;\n                        if (this._usesPromiseGetStats) {\n                            self.processNewAudioLevelReport();\n                        } else {\n                            self.processAudioLevelReport();\n                        }\n\n                        self.baselineAudioLevelsReport\n                            = self.currentAudioLevelsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.audioLevelsIntervalMilis\n        );\n    }\n\n    this.statsIntervalId = setInterval(\n        () => {\n            // Interval updates\n            self.peerconnection.getStats(\n                report => {\n                    let results = null;\n\n                    if (!report || !report.result\n                        || typeof report.result !== 'function') {\n                        // firefox\n                        results = report;\n                    } else {\n                        // chrome\n                        results = report.result();\n                    }\n\n                    self.currentStatsReport = results;\n                    try {\n                        if (this._usesPromiseGetStats) {\n                            self.processNewStatsReport();\n                        } else {\n                            self.processStatsReport();\n                        }\n                    } catch (e) {\n                        GlobalOnErrorHandler.callErrorHandler(e);\n                        logger.error(`Unsupported key:${e}`, e);\n                    }\n\n                    self.previousStatsReport = self.currentStatsReport;\n                },\n                error => self.errorCallback(error)\n            );\n        },\n        self.statsIntervalMilis\n    );\n};\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Define the function which retrieves the value from a specific report\n    // returned by RTCPeerConnection#getStats associated with a given\n    // browser-specific key.\n    let itemStatByKey;\n\n    switch (this._browserType) {\n    case browsers.CHROME:\n    case browsers.OPERA:\n    case browsers.NWJS:\n    case browsers.ELECTRON:\n        // TODO What about other types of browser which are based on Chrome such\n        // as NW.js? Every time we want to support a new type browser we have to\n        // go and add more conditions (here and in multiple other places).\n        // Cannot we do a feature detection instead of a browser type check? For\n        // example, if item has a stat property of type function, then it's very\n        // likely that whoever defined it wanted you to call it in order to\n        // retrieve the value associated with a specific key.\n        itemStatByKey = (item, key) => item.stat(key);\n        break;\n    case browsers.REACT_NATIVE:\n        // The implementation provided by react-native-webrtc follows the\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\n        // Array in which each element is a key-value pair.\n        itemStatByKey = function(item, key) {\n            let value;\n\n            item.values.some(pair => {\n                if (pair.hasOwnProperty(key)) {\n                    value = pair[key];\n\n                    return true;\n                }\n\n                return false;\n\n            });\n\n            return value;\n        };\n        break;\n    default:\n        itemStatByKey = (item, key) => item[key];\n    }\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => itemStatByKey(item, keyFromName(name));\n};\n\n/**\n * Obtains a stat value from given stat and converts it to a non-negative\n * number. If the value is either invalid or negative then 0 will be returned.\n * @param report\n * @param {string} name\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\n    let value = this._getStatValue(report, name);\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/* eslint-disable no-continue */\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    for (const idx in this.currentStatsReport) {\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n        const now = this.currentStatsReport[idx];\n\n        // The browser API may return \"undefined\" values in the array\n        if (!now) {\n            continue;\n        }\n\n        try {\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\n\n            if (receiveBandwidth || sendBandwidth) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(receiveBandwidth / 1000),\n                    'upload': Math.round(sendBandwidth / 1000)\n                };\n            }\n        } catch (e) { /* not supported*/ }\n\n        if (now.type === 'googCandidatePair') {\n            let active, ip, localCandidateType, localip,\n                remoteCandidateType, rtt, type;\n\n            try {\n                active = getStatValue(now, 'activeConnection');\n                if (!active) {\n                    continue;\n                }\n\n                ip = getStatValue(now, 'remoteAddress');\n                type = getStatValue(now, 'transportType');\n                localip = getStatValue(now, 'localAddress');\n                localCandidateType = getStatValue(now, 'localCandidateType');\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\n            } catch (e) { /* not supported*/ }\n            if (!ip || !type || !localip || active !== 'true') {\n                continue;\n            }\n\n            // Save the address unless it has been saved already.\n            const conferenceStatsTransport = this.conferenceStats.transport;\n\n            if (!conferenceStatsTransport.some(\n                    t =>\n                        t.ip === ip\n                            && t.type === type\n                            && t.localip === localip)) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localip,\n                    p2p: this.peerconnection.isP2P,\n                    localCandidateType,\n                    remoteCandidateType,\n                    rtt\n                });\n            }\n            continue;\n        }\n\n        if (now.type === 'candidatepair') {\n            // we need succeeded and selected pairs only\n            if (now.state !== 'succeeded' || !now.selected) {\n                continue;\n            }\n\n            const local = this.currentStatsReport[now.localCandidateId];\n            const remote = this.currentStatsReport[now.remoteCandidateId];\n\n            this.conferenceStats.transport.push({\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\n                type: local.transport,\n                localip: `${local.ipAddress}:${local.portNumber}`,\n                p2p: this.peerconnection.isP2P,\n                localCandidateType: local.candidateType,\n                remoteCandidateType: remote.candidateType\n            });\n        }\n\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.previousStatsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        // If type=\"track\", take the first SSRC from ssrcIds.\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before || !ssrc) {\n            continue;\n        }\n\n        // isRemote is available only in FF and is ignored in case of chrome\n        // according to the spec\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\n        // when isRemote is true indicates that the measurements were done at\n        // the remote endpoint and reported in an RTCP RR/XR.\n        // Fixes a problem where we are calculating local stats wrong adding\n        // the sent bytes to the local download bitrate.\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\n        // property.\n        if (now.isRemote === true || now.remoteSource === true) {\n            continue;\n        }\n\n        let ssrcStats = this.ssrc2stats.get(ssrc);\n\n        if (!ssrcStats) {\n            ssrcStats = new SsrcStats();\n            this.ssrc2stats.set(ssrc, ssrcStats);\n        }\n\n        let isDownloadStream = true;\n        let key = 'packetsReceived';\n        let packetsNow = getStatValue(now, key);\n\n        if (typeof packetsNow === 'undefined'\n            || packetsNow === null || packetsNow === '') {\n            isDownloadStream = false;\n            key = 'packetsSent';\n            packetsNow = getStatValue(now, key);\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\n                logger.warn('No packetsReceived nor packetsSent stat found');\n            }\n        }\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = this.getNonNegativeStat(before, key);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow\n            = this.getNonNegativeStat(now, 'packetsLost');\n        const packetsLostBefore\n            = this.getNonNegativeStat(before, 'packetsLost');\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        ssrcStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream\n        });\n\n        const bytesReceivedNow\n            = this.getNonNegativeStat(now, 'bytesReceived');\n        const bytesReceivedBefore\n            = this.getNonNegativeStat(before, 'bytesReceived');\n        const bytesReceived\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\n\n        let bytesSent = 0;\n\n        // TODO: clean this mess up!\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\n\n        if (typeof nowBytesTransmitted === 'number'\n            || typeof nowBytesTransmitted === 'string') {\n            nowBytesTransmitted = Number(nowBytesTransmitted);\n            if (!isNaN(nowBytesTransmitted)) {\n                byteSentStats[ssrc] = nowBytesTransmitted;\n                if (nowBytesTransmitted > 0) {\n                    bytesSent = nowBytesTransmitted\n                        - getStatValue(before, 'bytesSent');\n                }\n            }\n        }\n        bytesSent = Math.max(0, bytesSent);\n\n        const timeMs = now.timestamp - before.timestamp;\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\n\n        if (timeMs > 0) {\n            // TODO is there any reason to round here?\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\n        }\n\n        ssrcStats.addBitrate({\n            'download': bitrateReceivedKbps,\n            'upload': bitrateSentKbps\n        });\n\n        const resolution = {\n            height: null,\n            width: null\n        };\n\n        try {\n            let height, width;\n\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\n                resolution.height = height;\n                resolution.width = width;\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\n                resolution.height = height;\n                resolution.width = width;\n            }\n        } catch (e) { /* not supported*/ }\n\n        // Tries to get frame rate\n        let frameRate;\n\n        try {\n            frameRate = getStatValue(now, 'googFrameRateReceived')\n                || getStatValue(now, 'googFrameRateSent') || 0;\n        } catch (e) {\n            // if it fails with previous properties(chrome),\n            // let's try with another one (FF)\n            try {\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\n            } catch (err) { /* not supported*/ }\n        }\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n        if (resolution.height && resolution.width) {\n            ssrcStats.setResolution(resolution);\n        } else {\n            ssrcStats.setResolution(null);\n        }\n    }\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n\n    for (const idx in this.currentAudioLevelsReport) {\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n\n        const now = this.currentAudioLevelsReport[idx];\n\n        if (now.type !== 'ssrc' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.baselineAudioLevelsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before) {\n            logger.warn(`${ssrc} not enough data`);\n            continue;\n        }\n\n        if (!ssrc) {\n            if ((Date.now() - now.timestamp) < 3000) {\n                logger.warn('No ssrc: ');\n            }\n            continue;\n        }\n\n        // Audio level\n        let audioLevel;\n\n        try {\n            audioLevel\n                = getStatValue(now, 'audioInputLevel')\n                    || getStatValue(now, 'audioOutputLevel');\n        } catch (e) { /* not supported*/\n            logger.warn('Audio Levels are not available in the statistics.');\n            clearInterval(this.audioLevelsIntervalId);\n\n            return;\n        }\n\n        if (audioLevel) {\n            let isLocal;\n\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\n            if (now.type === 'ssrc') {\n                isLocal = !getStatValue(now, 'packetsReceived');\n\n            // If type=\"track\", check remoteSource boolean property.\n            } else {\n                isLocal = !now.remoteSource;\n            }\n\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\n            // 0..1 range (0 == silence). However browsers don't behave that\n            // way so we must convert it to 0..1.\n            // TODO: Can't find specs about what this value really is, but it\n            // seems to vary between 0 and around 32k.\n            audioLevel = audioLevel / 32767;\n\n            if (!(ssrc in this.audioLevelReportHistory)) {\n                this.audioLevelReportHistory[ssrc] = {\n                    isLocal,\n                    data: []\n                };\n            }\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    }\n};\n\n/* eslint-enable no-continue */\n\n/**\n * New promised based getStats report processing.\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\n * frameRate stat is missing and calculating it using framesSent,\n * gives values double the values seen in webrtc-internals.\n * https://w3c.github.io/webrtc-stats/\n */\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\n * Promised based getStats.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => item[keyFromName(name)];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing new getStats logic.\n */\nStatsCollector.prototype.processNewStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n\n        // RTCIceCandidatePairStats\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair'\n            && now.nominated\n            && now.state === 'succeeded') {\n\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate\n                = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate\n                = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            // safari currently does not provide ice candidates in stats\n            if (remoteUsedCandidate && localUsedCandidate) {\n                // FF uses non-standard ipAddress, portNumber, transport\n                // instead of ip, port, protocol\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\n                const localPort = getStatValue(localUsedCandidate, 'port');\n\n                const localIp = `${localIpAddress}:${localPort}`;\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(\n                        t =>\n                            t.ip === ip\n                            && t.type === type\n                            && t.localip === localIp)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localIp,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow\n                = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore\n                = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff\n                = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            if (now.type === 'inbound-rtp') {\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(\n                                    now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n\n                // RTCInboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\n                // TODO: can we use framesDecoded for frame rate, available\n                // in chrome\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(\n                                now, before, 'bytesSent')\n                });\n\n                // RTCOutboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\n                // TODO: can we use framesEncoded for frame rate, available\n                // in chrome\n            }\n\n            // FF has framerateMean out of spec\n            const framerateMean = now.framerateMean;\n\n            if (framerateMean) {\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\n            }\n\n        // track for resolution\n        // RTCVideoHandlerStats\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track') {\n\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n\n            // Tries to get frame rate\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                // we need to calculate it\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore\n                            = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            const trackIdentifier = now.trackIdentifier;\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            } else {\n                ssrcStats.setResolution(null);\n            }\n        }\n    });\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processNewAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n/**\n * End new promised based getStats processing methods.\n */\n","/* global __filename, RTCSessionDescription */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RtxModifier from '../xmpp/RtxModifier';\n\n// FIXME SDP tools should end up in some kind of util module\nimport SDP from '../xmpp/SDP';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\n\nconst logger = getLogger(__filename);\nconst SIMULCAST_LAYERS = 3;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\nconst SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\nconst SIM_LAYER_BITRATES_BPS = [ 200000, 700000, 2500000 ];\nconst DESKSTOP_SHARE_RATE = 500000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.enableFirefoxSimulcast if set to 'true' will enable\n * experimental simulcast support on Firefox.\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\n * stream.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP.\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs.\n * @param {boolean} options.enableLayerSuspension if set to 'true', we will\n * cap the video send bitrate when we are told we have not been selected by\n * any endpoints (and therefore the non-thumbnail streams are not in use).\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n    const Interop = require('@jitsi/sdp-interop').Interop;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast({ numOfLayers: SIMULCAST_LAYERS,\n        explodeRemoteSimulcast: false });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n    this.peerconnection.onaddstream\n        = event => this._remoteStreamAdded(event.stream);\n    this.peerconnection.onremovestream\n        = event => this._remoteStreamRemoved(event.stream);\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            }, () => {\n\n                // empty error callback\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast\n        && browser.supportsSimulcast()\n\n        // Firefox has been added as supporting simulcast, but it is\n        // experimental so we only want to do it for firefox if the config\n        // option is set.  Unfortunately, browser::supportsSimulcast()\n        // doesn't have a reference to the config options, so we have\n        // to do it here\n        && (!browser.isFirefox()\n            || this.options.enableFirefoxSimulcast);\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = new SDP(this.remoteDescription.sdp);\n    const mediaLines\n        = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from\n        // 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(\n            `${this} overwriting remote track for`\n                + `${ownerEndpointId} ${mediaType}`);\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        if (options.startSilent) {\n            audioMedia.direction = 'inactive';\n        } else {\n            audioMedia.direction = 'sendrecv';\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * NOTE: unlike plan B simulcast, the ssrcs in this inject ssrc-group will\n * NOT necessarily be in order of quality (low to high) because:\n * a) when translating between unified plan and plan b the order of the ssrcs\n * is not preserved and\n * b) it isn't guaranteed that firefox will give them to us in order to begin\n * with\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        if (video.simulcast_03) {\n            const ssrcs = [];\n\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n            video.ssrcGroups = video.ssrcGroups || [];\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        }\n\n        if (browser.doesVideoMuteByStreamRemove()) {\n            desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n            logger.debug(\n                'getLocalDescription::postTransform (munge local SDP)', desc);\n        }\n\n        // What comes out of this getter will be signalled over Jingle to\n        // the other peer, so we need to make sure the media direction is\n        // 'sendrecv' because we won't change the direction later and don't want\n        // the other peer to think we can't send or receive.\n        //\n        // Note that the description we set in chrome does have the accurate\n        // direction (e.g. 'recvonly'), since that is technically what is\n        // happening (check setLocalDescription impl).\n        desc = enforceSendRecv(desc, this.options);\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc || {};\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n */\nTraceablePeerConnection.prototype.addTrack = function(track) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n        logger.error(`${track} is already in ${this}`);\n\n        return;\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    const webrtcStream = track.getOriginalStream();\n\n    if (webrtcStream) {\n        this._addStream(webrtcStream);\n\n    // It's not ok for a track to not have a WebRTC stream if:\n    } else if (!browser.doesVideoMuteByStreamRemove()\n                || track.isAudioTrack()\n                || (track.isVideoTrack() && !track.isMuted())) {\n        logger.error(`${this} no WebRTC stream for: ${track}`);\n    }\n\n    // Muted video tracks do not have WebRTC stream\n    if (browser.doesVideoMuteByStreamRemove()\n            && track.isVideoTrack() && track.isMuted()) {\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n        const simGroup\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n        if (simGroup) {\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\n        }\n        const fidGroups\n            = ssrcInfo.groups.filter(\n                groupInfo => groupInfo.semantics === 'FID');\n\n        if (fidGroups) {\n            const rtxSsrcMapping = new Map();\n\n            fidGroups.forEach(fidGroup => {\n                const primarySsrc = fidGroup.ssrcs[0];\n                const rtxSsrc = fidGroup.ssrcs[1];\n\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n            });\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n        }\n    }\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {boolean} <tt>true</tt> if the state of underlying PC has changed and\n * the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return false;\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return false;\n    }\n    this._addStream(webRtcStream);\n\n    return true;\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    if (browser.supportsRtpSender()) {\n        this._handleSenderRemoveStream(mediaStream);\n    } else {\n        this.peerconnection.removeStream(mediaStream);\n    }\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        if (browser.supportsRtpSender()) {\n            this._handleSenderRemoveStream(webRtcStream);\n        } else {\n            this.peerconnection.removeStream(webRtcStream);\n        }\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStream.\n *\n * @param {MediaStream} stream - The media stream used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\n    const track = stream.getTracks()[0];\n\n    if (!track) {\n        logger.error('Cannot find sender: no tracks.');\n\n        return;\n    }\n\n    // Find the right sender (for audio or video)\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.supportsRtpSender() && oldTrack && newTrack) {\n        // Add and than remove stream in FF leads to wrong local SDP. In order\n        // to workaround the issue we need to use sender.replaceTrack().\n        const sender = this.findSenderByStream(oldTrack.getOriginalStream());\n        const stream = newTrack.getOriginalStream();\n\n        if (sender && stream) {\n            const track = stream.getTracks()[0];\n\n            if (track) {\n                return sender.replaceTrack(track, stream).then(() => {\n                    // Since there is no need to do renegotiations we need to\n                    // fix all ssrc-msid mappings here.\n                    // NOTE: after sender.replaceTrack the sdp will remain the\n                    // same but the stream attach to the new JitsiLocalTrack\n                    // will have different msid. Luckily on FF we are not doing\n                    // all the transformations related to video mute.\n\n                    const ssrc = this.localSSRCs.get(oldTrack.rtcId);\n\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this.localSSRCs.delete(oldTrack.rtcId);\n                    this._addedStreams\n                        = this._addedStreams.filter(s => s !== stream);\n\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n\n                    // Override the msid of JitsiLocalTrack in order to be\n                    // consistent with the SDP values.\n                    newTrack.storedMSID = oldTrack.storedMSID;\n                    this._addedStreams.push(stream);\n\n                    this.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        extractPrimarySSRC(ssrc));\n\n                    return false;\n                });\n            }\n        }\n    }\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        this.addTrack(newTrack);\n    }\n\n    return Promise.resolve(true);\n};\n\n/**\n * Replaces the existing media stream from the underlying peerconnection with the new\n * mediastream that has been added to the JitsiLocalTrack. Renegotiation with the remote\n * peer is not needed in this case.\n * @param {JitsiLocalTrack} localTrack - the localtrack whose mediastream has been updated.\n * @return {Promise} - Promise resolved with undefined if the track is replaced,\n * or rejected with <tt>InvalidModificationError<tt> if the track cannot be replaced.\n */\nTraceablePeerConnection.prototype.replaceTrackWithoutOfferAnswer = function(localTrack) {\n    const newTrack = localTrack.stream.getTracks()[0];\n    const sender = this.findSenderByKind(newTrack.kind);\n\n    if (!sender) {\n        return Promise.reject(new Error(`Could not find RTCRtpSender for ${newTrack.kind}`));\n    }\n\n    return sender.replaceTrack(newTrack)\n        .then(() => {\n            this._addedStreams = this._addedStreams.filter(s => s !== localTrack._originalStream);\n            this._addedStreams.push(localTrack.stream);\n            localTrack.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, localTrack);\n        })\n        .catch(err => {\n            logger.error(`replaceTrackWithoutOfferAnswer - replaceTrack failed for ${newTrack.kind}`, err);\n        });\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {boolean} <tt>true</tt> if the underlying PeerConnection's state has\n * changed and the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return false;\n    }\n\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return true;\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return false;\n};\n\n/**\n * Remove stream handling for browsers supporting RTPSender\n * @param stream: webrtc media stream\n */\nTraceablePeerConnection.prototype._handleSenderRemoveStream = function(\n        stream) {\n    if (!stream) {\n        // There is nothing to be changed\n        return;\n    }\n\n    const sender = this.findSenderByStream(stream);\n\n    if (sender) {\n        this.peerconnection.removeTrack(sender);\n    } else {\n        logger.log('Cannot remove tracks: no RTPSender.');\n    }\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    if (this.options.disableH264 || this.options.preferH264) {\n        const parsedSdp = transform.parse(localSdp.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        if (this.options.disableH264) {\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\n        } else {\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n        }\n\n        localSdp = new RTCSessionDescription({\n            type: localSdp.type,\n            sdp: transform.write(parsedSdp)\n        });\n\n        this.trace('setLocalDescription::postTransform (H264)',\n            dumpSDP(localSdp));\n    }\n\n    localSdp = this._adjustLocalMediaDirection(localSdp);\n\n    localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n\n    // if we're using unified plan, transform to it first.\n    if (browser.usesUnifiedPlan()) {\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Takes in a *unified plan* offer and inserts the appropriate\n * parameters for adding simulcast receive support.\n * @param {Object} desc - A session description object\n * @param {String} desc.type - the type (offer/answer)\n * @param {String} desc.sdp - the sdp content\n *\n * @return {Object} A session description (same format as above) object\n * with its sdp field modified to advertise simulcast receive support\n */\nTraceablePeerConnection.prototype._insertUnifiedPlanSimulcastReceive\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // In order of lowest to highest spatial quality\n        video.rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n        // eslint-disable-next-line camelcase\n        video.simulcast_03 = {\n            value: `recv rid=${SIM_LAYER_RIDS.join(';')}`\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function(localTrack) {\n    const mediaType = localTrack.type;\n\n    if (!this.options.capScreenshareBitrate\n        || mediaType === MediaType.AUDIO) {\n\n        return;\n    }\n    if (!this.peerconnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\n\n        return;\n    }\n    const videoType = localTrack.videoType;\n    const trackId = localTrack.track.id;\n\n    this.peerconnection.getSenders()\n        .filter(s => s.track && s.track.id === trackId)\n        .forEach(sender => {\n            try {\n                const parameters = sender.getParameters();\n\n                if (parameters.encodings && parameters.encodings.length) {\n                    logger.info('Setting max bitrate on video stream');\n                    for (const encoding in parameters.encodings) {\n                        if (parameters.encodings.hasOwnProperty(encoding)) {\n                            parameters.encodings[encoding].maxBitrate\n                                = videoType === 'desktop'\n                                    ? DESKSTOP_SHARE_RATE\n                                    : SIM_LAYER_BITRATES_BPS[encoding];\n                        }\n                    }\n                    sender.setParameters(parameters);\n                }\n            } catch (err) {\n                logger.error('Browser does not support getParameters/setParamters '\n                    + 'or setting max bitrate on the encodings: ', err);\n            }\n        });\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // TODO the focus should squeze or explode the remote simulcast\n    // eslint-disable-next-line no-param-reassign\n    description = this.simulcast.mungeRemoteDescription(description);\n    this.trace(\n        'setRemoteDescription::postTransform (simulcast)',\n        dumpSDP(description));\n\n    if (this.options.preferH264) {\n        const parsedSdp = transform.parse(description.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        SDPUtil.preferVideoCodec(videoMLine, 'h264');\n\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    // If the browser uses unified plan, transform to it first\n    if (browser.usesUnifiedPlan()) {\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: this.rtxModifier.stripRtx(description.sdp)\n        });\n\n        this.trace(\n            'setRemoteDescription::postTransform (stripRtx)',\n            dumpSDP(description));\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description);\n        this.trace(\n            'setRemoteDescription::postTransform (Plan A)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this._insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    } else {\n        // Plan B\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    }\n\n    // Safari WebRTC errors when no supported video codec is found in the offer.\n    // To prevent the error, inject H264 into the video mLine.\n    if (browser.isSafariWithWebrtc() && !browser.isSafariWithVP8()) {\n        logger.debug('Maybe injecting H264 into the remote description');\n\n        // eslint-disable-next-line no-param-reassign\n        description = this._injectH264IfNotPresent(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Inserts an H264 payload into the description if not already present. This is\n * need for Safari WebRTC, which errors when no supported video codec is found\n * in the offer. Related bug reports:\n * https://bugs.webkit.org/show_bug.cgi?id=173141\n * https://bugs.chromium.org/p/webrtc/issues/detail?id=4957\n *\n * @param {RTCSessionDescription} description - An RTCSessionDescription\n * to inject with an H264 payload.\n * @private\n * @returns {RTCSessionDescription}\n */\nTraceablePeerConnection.prototype._injectH264IfNotPresent = function(\n        description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n    if (!videoMLine) {\n        logger.debug('No videoMLine found, no need to inject H264.');\n\n        return description;\n    }\n\n    if (videoMLine.rtp.some(rtp => rtp.codec.toLowerCase() === 'h264')) {\n        logger.debug('H264 codec found in video mLine, no need to inject.');\n\n        return description;\n    }\n\n    const { fmtp, payloads, rtp } = videoMLine;\n    const payloadsArray = payloads.toString().split(' ');\n    let dummyPayloadType;\n\n    for (let i = 127; i >= 96; i--) {\n        if (!payloadsArray.includes(i)) {\n            dummyPayloadType = i;\n            payloadsArray.push(i);\n            videoMLine.payloads = payloadsArray.join(' ');\n            break;\n        }\n    }\n\n    if (typeof dummyPayloadType === 'undefined') {\n        logger.error('Could not find valid payload type to inject.');\n\n        return description;\n    }\n\n    rtp.push({\n        codec: 'H264',\n        payload: dummyPayloadType,\n        rate: 90000\n    });\n\n    fmtp.push({\n        config: 'level-asymmetry-allowed=1;'\n            + 'packetization-mode=1;'\n            + 'profile-level-id=42e01f',\n        payload: dummyPayloadType\n    });\n\n    logger.debug(\n        `Injecting H264 payload type ${dummyPayloadType} into video mLine.`);\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\n/**\n * Modifies the values of the setup attributes (defined by\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\n * answer in order to overcome a delay of 1 second in the connection\n * establishment between some devices and Videobridge.\n *\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\n * being prepared to respond\n * @param {SDP} answer - the SDP to modify\n * @private\n */\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\n        // It looks like Firefox doesn't agree with the fix (at least in its\n        // current implementation) because it effectively remains active even\n        // after we tell it to become passive. Apart from Firefox which I tested\n        // after the fix was deployed, I tested Chrome only. In order to prevent\n        // issues with other browsers, limit the fix to known devices for the\n        // time being.\n        return;\n    }\n\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\n    // answerer (as orchestrated by Jicofo). In accord with\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\n    // are ICE FULL agents, Videobridge will take on the controlling role and\n    // WebRTC will take on the controlled role. In accord with\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\n    // choose either the setup attribute value of setup:active or\n    // setup:passive. Chrome will by default choose setup:active because it is\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\n    // latency. The case of setup:active allows WebRTC to send a DTLS\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\n    // Unfortunately, Videobridge will be unable to respond immediately because\n    // may not have WebRTC's answer or may have not completed the ICE\n    // connectivity establishment. Even more unfortunate is that in the\n    // described scenario Chrome's DTLS implementation will insist on\n    // retransmitting its ClientHello after a second (the time is in accord\n    // with the respective RFC) and will thus cause the whole connection\n    // establishment to exceed at least 1 second. To work around Chrome's\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\n    // default choice of setup:active to setup:passive.\n    if (offer && answer\n            && offer.media && answer.media\n            && offer.media.length === answer.media.length) {\n        answer.media.forEach((a, i) => {\n            if (SDPUtil.findLine(\n                    offer.media[i],\n                    'a=setup:actpass',\n                    offer.session)) {\n                answer.media[i]\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\n            }\n        });\n        answer.raw = answer.session + answer.media.join('');\n    }\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    if (browser.isFirefox() && this.isSimulcastOn()) {\n        const videoSender\n            = this.peerconnection.getSenders().find(sender =>\n                sender.track !== null && sender.track.kind === 'video');\n        const simParams = {\n            encodings: [\n                {\n                    rid: SIM_LAYER_1_RID,\n                    scaleResolutionDownBy: 4\n                },\n                {\n                    rid: SIM_LAYER_2_RID,\n                    scaleResolutionDownBy: 2\n                },\n                {\n                    rid: SIM_LAYER_3_RID\n                }\n            ]\n        };\n\n        videoSender.setParameters(simParams);\n    }\n\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\n/**\n * Checks if a camera track has been added to the peerconnection\n * @param {TraceablePeerConnection} peerConnection\n * @return {boolean} <tt>true</tt> if the peerconnection has\n * a camera track for its video source <tt>false</tt> otherwise.\n */\nfunction hasCameraTrack(peerConnection) {\n    return peerConnection.getLocalTracks()\n        .some(t => t.videoType === 'camera');\n}\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            // if we're using unified plan, transform to Plan B.\n            if (browser.usesUnifiedPlan()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.interop.toPlanB(resultSdp);\n                this.trace(\n                    `create${logName}OnSuccess::postTransform (Plan B)`,\n                    dumpSDP(resultSdp));\n                if (this.isSimulcastOn()) {\n                    // eslint-disable-next-line no-param-reassign\n                    resultSdp\n                        = this._injectSsrcGroupForUnifiedSimulcast(resultSdp);\n                    this.trace(\n                        `create${logName}OnSuccess::postTransform`\n                        + '(inject ssrc group)', dumpSDP(resultSdp));\n                }\n            }\n\n            /**\n             * We don't keep ssrcs consitent for Firefox because rewriting\n             *  the ssrcs between createAnswer and setLocalDescription breaks\n             *  the caching in sdp-interop (sdp-interop must know about all\n             *  ssrcs, and it updates its cache in toPlanB so if we rewrite them\n             *  after that, when we try and go back to unified plan it will\n             *  complain about unmapped ssrcs)\n             */\n            if (!browser.usesUnifiedPlan()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // configure simulcast for camera tracks always and for\n            // desktop tracks only when the testing flag for maxbitrates\n            // in config.js is disabled.\n            if (this.isSimulcastOn()\n                && (!this.options.capScreenshareBitrate\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.supportsRtx()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\n            //  details)\n            if (!isOffer) {\n                const remoteDescription\n                    = new SDP(this.remoteDescription.sdp);\n                const localDescription = new SDP(resultSdp.sdp);\n\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: localDescription.raw\n                });\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nfunction extractPrimarySSRC(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n}\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully\n * obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain\n * stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\n    // accounting for different getStats apis, making the browser-checking-if\n    // unnecessary.\n    if (browser.isSafariWithWebrtc() || browser.isFirefox()\n            || browser.isReactNative()) {\n        // uses the new Promise based getStats\n        this.peerconnection.getStats()\n            .then(callback)\n            .catch(errback || (() => {\n\n                // Making sure that getStats won't fail if error callback is\n                // not passed.\n            }));\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n\n    // configure simulcast for camera tracks always and for\n    // desktop tracks only when the testing flag for maxbitrates\n    // in config.js is disabled.\n    if (this.isSimulcastOn()\n        && (!this.options.capScreenshareBitrate\n        || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIMULCAST_LAYERS; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx && browser.supportsRtx()) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\nconst handleLayerSuspension = function(peerConnection, isSelected) {\n    if (!peerConnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTPSender');\n\n        return;\n    }\n\n    const videoSender = peerConnection.getSenders()\n        .find(sender => sender.track.kind === 'video');\n\n    if (!videoSender) {\n        logger.warn('handleLayerSuspension unable to find video sender');\n\n        return;\n    }\n    if (!videoSender.getParameters) {\n        logger.debug('Browser doesn\\'t support RTPSender parameters');\n\n        return;\n    }\n    const parameters = videoSender.getParameters();\n\n    if (isSelected) {\n        logger.debug('Currently selected, enabling all sim layers');\n\n        // Make sure all encodings are enabled\n        parameters.encodings.forEach(e => {\n            e.active = true;\n        });\n    } else {\n        logger.debug('Not currently selected, disabling upper layers');\n\n        // Turn off the upper simulcast layers\n        [ 1, 2 ].forEach(simIndex => {\n            if (parameters.encodings[simIndex]) {\n                parameters.encodings[simIndex].active = false;\n            }\n        });\n    }\n    videoSender.setParameters(parameters);\n};\n\n/**\n * Set whether or not the endpoint is 'selected' by other endpoints, meaning\n * it appears on their main stage\n */\nTraceablePeerConnection.prototype.setIsSelected = function(isSelected) {\n    if (this.options.enableLayerSuspension) {\n        logger.debug('Layer suspension enabled,'\n            + `currently selected? ${isSelected}`);\n        handleLayerSuspension(this.peerconnection, isSelected);\n    }\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","import { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiTrack from './JitsiTrack';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\nimport SDPUtil from './SDPUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","import {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    return this.xmpp.caps.addFeature(feature, submit);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    return this.xmpp.caps.removeFeature(feature, submit);\n};\n","/* global __filename, $, Promise */\nimport { Strophe } from 'strophe.js';\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport RTC from './modules/RTC/RTC';\nimport TalkMutedDetection from './modules/detection/TalkMutedDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedNotification\n    from './modules/connectivity/IceFailedNotification';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport RttMonitor from './modules/rttmonitor/rttmonitor';\nimport Settings from './modules/settings/Settings';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\n * (don't open any channel).\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n    this._conferenceJoinAnalyticsEventSent = false;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.rttMonitor = new RttMonitor(config.rttMonitor || {});\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            callStatsConfIDNamespace: this.connection.options.hosts.domain,\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    if (config.enableTalkWhileMuted) {\n\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n\n\n        } else {\n            logger.info('Using audio level based detection for generating talk while muted events');\n            this._talkWhileMutedDetection = new TalkMutedDetection(\n                this, () => this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n        }\n    }\n\n    if (config.enableNoisyMicDetection) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.rttMonitor) {\n        this.rttMonitor.stop();\n        this.rttMonitor = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\n\n        this.room.sendMessage(message, elementName, displayName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addToPresence(name, values);\n        this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        // remove previously set nickname\n        this.room.removeFromPresence('nick');\n\n        this.room.addToPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        });\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (track.isVideoTrack()) {\n        // Ensure there's exactly 1 local video track in the conference.\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\n\n        if (localVideoTrack) {\n            // Don't be excessively harsh and severe if the API client happens\n            // to attempt to add the same local video track twice.\n            if (track === localVideoTrack) {\n                return Promise.resolve(track);\n            }\n\n            return Promise.reject(new Error(\n                'cannot add second video track to the conference'));\n\n        }\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the\n                // JitsiConference level\n                this._setupNewTrack(newTrack);\n            }\n\n            return Promise.resolve();\n        }, error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the track at the lower level by going through the Jingle session\n * and WebRTC peer connection. The track is replaced without the need for an\n * offer/answer cycle.\n * @param {JitsiLocalTrack} localTrack - the local track whose media stream has\n * been updated.\n */\nJitsiConference.prototype.replaceTrackWithoutOfferAnswer = function(localTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrackWithoutOfferAnswer(localTrack));\n    } else {\n        logger.info('replaceTrackWithoutOfferAnswer - no JVB JingleSession');\n    }\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrackWithoutOfferAnswer(localTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        this.removeCommand('videoType');\n        this.sendCommand('videoType', {\n            value: newTrack.videoType,\n            attributes: {\n                xmlns: 'http://jitsi.org/jitmeet/video'\n            }\n        });\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no P2P Jingle session started yet');\n    }\n\n    return Promise.all(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(\n            this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(\n            this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.all(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.rtc.selectEndpoints(participantIds);\n};\n\n/**\n * Elects the participant with the given id to be the pinned participant in\n * order to always receive video for this participant (even when last n is\n * enabled).\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n */\nJitsiConference.prototype.pinParticipant = function(participantId) {\n    this.rtc.pinEndpoint(participantId);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.rtc.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.rtc.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.keys(this.participants).map(function(key) {\n        return this.participants[key];\n    }, this);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid());\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant._role = role;\n    participant._botType = botType;\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    this._maybeStartOrStopP2P();\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\n                participant.setProperty('features_jigasi', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant._botType = botType;\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant._botType) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    const removedTracks = this.rtc.removeRemoteTracks(id);\n\n    removedTracks.forEach(\n        track =>\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\n\n    // there can be no participant in case the member that left is focus\n    if (participant) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\n    this._maybeClearSITimeout();\n};\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n */\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant._role = role;\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n        this.p2pJingleSession.setAnswer(answer);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n    try {\n        jingleSession.initialize(this.room, this.rtc, this.options.config);\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    // Add local tracks to the session\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            this.getLocalTracks()\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    let bridgeChannelType;\n\n    switch (this.options.config.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        bridgeChannelType = 'datachannel';\n        break;\n    case 'websocket':\n        bridgeChannelType = 'websocket';\n        break;\n    }\n\n    if (bridgeChannelType === 'datachannel') {\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection;\n    }\n\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.removeFromPresence('startmuted');\n    this.room.addToPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    });\n    this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConference.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        if (this.xmpp.isPingSupported()) {\n            this._delayedIceFailed = new IceFailedNotification(this);\n            this._delayedIceFailed.start(session);\n        } else {\n            // Let Jicofo know that the JVB's ICE connection has failed\n            logger.info('PING not supported - sending ICE failed immediately');\n            session.sendIceFailedNotification();\n        }\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms',\n            'octo-enabled'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.rtc.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    // NOTE one may consider to start P2P with the local tracks detached,\n    // but no data will be sent until ICE succeeds anyway. And we switch\n    // immediately once the P2P ICE connects.\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(\n        maxFrameHeight) {\n    this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = true;\n};\n","/* global __filename */\nimport { Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport Statistics from './modules/statistics/statistics';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const participant = conference.getParticipantById(\n                    Strophe.getResourceFromJid(jid));\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, displayName);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        id => {\n            if (conference.lastDominantSpeaker !== id && conference.room) {\n                conference.lastDominantSpeaker = id;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\n\n                if (conference.statistics && conference.myUserId() === id) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(\n                        conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    conference.xmpp.caps.removeListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    const featuresChangedListener = from => {\n        const participant\n            = conference.getParticipantById(\n            Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\n                participant);\n        }\n    };\n\n    conference.xmpp.caps.addListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        featuresChangedListener);\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\n        = featuresChangedListener;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { Strophe } from 'strophe.js';\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\nimport * as MediaType from './service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(timeout = 5000) {\n        if (this._getFeaturesPromise) {\n            return this._getFeaturesPromise;\n        }\n\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\n            .catch(error => {\n                // Retry on feature version mismatch\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\n                }\n\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\n\n                return Promise.reject(error);\n            });\n\n        return this._getFeaturesPromise\n            .then(result => {\n                this._getFeaturesPromise = undefined;\n\n                return result;\n            }, error => {\n                this._getFeaturesPromise = undefined;\n\n                throw error;\n            });\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport Moderator from './moderator';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room. This is intended to be used only by\n     * jitsi-meet-spot.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        // We need to broadcast 'videomuted' status from the beginning, cause\n        // Jicofo makes decisions based on that. Initialize it with 'false'\n        // here.\n        this.addVideoInfoToPresence(false);\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n    }\n\n    /**\n     * Joins the chat room.\n     * @param password\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info('Conference focus disabled');\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.trace('No meeting ID from backend');\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        const self = this;\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: self.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            self.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                this.sendPresence();\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, jid);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                memberOfThis.isFocus = true;\n                this._initFocus(from, jid);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param mucJid the jid of the focus in the muc\n     */\n    _initFocus(from, mucJid) {\n        this.focusMucJid = from;\n\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>destroy').length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            // if no member is found this is the case we had kicked someone\n            // and we are not in the list of members\n            if (membersKeys.find(jid => Strophe.getResourceFromJid(jid) === actorNick)) {\n                // we first fire the kicked so we can show the participant\n                // who kicked, before notifying that participant left\n                // we fire kicked for us and for any participant kicked\n                this.eventEmitter.emit(\n                    XMPPEvents.KICKED,\n                    isSelfPresence,\n                    actorNick,\n                    Strophe.getResourceFromJid(from));\n            }\n        }\n\n        if (!isSelfPresence) {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        } else if (membersKeys.length > 0) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid\n                && $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n            this.discoRoomInfo();\n        }\n        const jsonMessage = $(msg).find('>json-message').text();\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n        // We emit this event if the message is a valid json, and is not\n        // delivered after a delay, i.e. stamp is undefined.\n        // e.g. - subtitles should not be displayed if delayed.\n        if (parsedJson && stamp === undefined) {\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                from, parsedJson);\n\n            return;\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    kick(jid) {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t('You have been kicked.').up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    // FIXME: is muc#roomconfig_passwordprotectedroom required?\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param key\n     * @param values\n     */\n    addToPresence(key, values) {\n        values.tagName = key;\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n    }\n\n    /**\n     * Retreives a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     *\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        this.removeFromPresence('audiomuted');\n        this.addToPresence(\n            'audiomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        this.addAudioInfoToPresence(mute);\n\n        // FIXME resend presence on CONNECTED\n        this.sendPresence();\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        this.removeFromPresence('videomuted');\n        this.addToPresence(\n            'videomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute);\n        this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: false, // unmuted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     */\n    muteParticipant(jid, mute) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: 'http://jitsi.org/jitmeet/audio',\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this._removeConnListeners.forEach(remove => remove());\n            this._removeConnListeners = [];\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $, Promise */\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nimport { $iq, Strophe } from 'strophe.js';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nimport Settings from '../settings/Settings';\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\n    // it will be enabled automatically if focus detects the component through\n    // service discovery.\n    this.sipGatewayEnabled\n        = this.options.connection.hosts\n            && this.options.connection.hosts.call_control !== undefined;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n    if (this.options.connection.enforcedBridge !== undefined) {\n        elem.c(\n            'property', {\n                name: 'enforcedBridge',\n                value: this.options.connection.enforcedBridge\n            }).up();\n    }\n\n    // Tell the focus we have Jigasi configured\n    if (this.options.connection.hosts !== undefined\n        && this.options.connection.hosts.call_control !== undefined) {\n        elem.c(\n            'property', {\n                name: 'call_control',\n                value: this.options.connection.hosts.call_control\n            }).up();\n    }\n    if (config.channelLastN !== undefined) {\n        elem.c(\n            'property', {\n                name: 'channelLastN',\n                value: config.channelLastN\n            }).up();\n    }\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.enableTcc !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableTcc',\n                    value: Boolean(config.enableTcc)\n                }).up();\n    }\n    if (config.enableRemb !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableRemb',\n                    value: Boolean(config.enableRemb)\n                }).up();\n    }\n    if (config.minParticipants !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'minParticipants',\n                    value: config.minParticipants\n                }).up();\n    }\n\n    elem.c(\n        'property', {\n            name: 'enableLipSync',\n            value: this.options.connection.enableLipSync !== false\n        }).up();\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n    if (config.testing && config.testing.octo\n        && typeof config.testing.octo.probability === 'number') {\n        if (Math.random() < config.testing.octo.probability) {\n            elem.c(\n                'property', {\n                    name: 'octo',\n                    value: true\n                }).up();\n        }\n    }\n\n    let openSctp;\n\n    switch (this.options.conference.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        openSctp = true;\n        break;\n    case 'websocket':\n        openSctp = false;\n        break;\n    }\n\n    elem.c(\n        'property', {\n            name: 'openSctp',\n            value: openSctp\n        }).up();\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    if (this.options.conference.stereo !== undefined) {\n        elem.c(\n            'property', {\n                name: 'stereo',\n                value: this.options.conference.stereo\n            }).up();\n    }\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\n        elem.c(\n            'property', {\n                name: 'useRoomAsSharedDocumentName',\n                value: this.options.conference.useRoomAsSharedDocumentName\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if focus has auto-detected Jigasi component(this will be also\n    // included if we have passed our host from the config)\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Class attaches to Strophe BOSH connection and tracks the time of last successful request.\n * It does that by overriding {@code nextValidRid} method and tracking how the RID value changes.\n * A request was successful if the number has increased by 1 since the last time the method was called.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._nextValidRid = null;\n        this._lastSuccess = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(stropheConnection) {\n        stropheConnection.nextValidRid = rid => {\n            // Just before connect and on disconnect RID will get assigned a new random value.\n            // A request was successful only when the value got increased exactly by 1.\n            if (this._nextValidRid === rid - 1) {\n                this._lastSuccess = new Date().getTime();\n            }\n            this._nextValidRid = rid;\n        };\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? new Date().getTime() - this._lastSuccess\n            : null;\n    }\n}\n","/* global $, __filename */\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\nimport Statistics from '../statistics/statistics';\n\nimport JingleSessionPC from './JingleSessionPC';\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n                    isP2P ? this.p2pIceConfig : this.jvbIceConfig,\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace:\\t', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.connection.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n            res => {\n                const iceservers = [];\n\n                $(res).find('>services>service').each((idx, el) => {\n                    // eslint-disable-next-line no-param-reassign\n                    el = $(el);\n                    const dict = {};\n                    const type = el.attr('type');\n\n                    switch (type) {\n                    case 'stun':\n                        dict.urls = `stun:${el.attr('host')}`;\n                        if (el.attr('port')) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        iceservers.push(dict);\n                        break;\n                    case 'turn':\n                    case 'turns': {\n                        dict.urls = `${type}:`;\n                        const username = el.attr('username');\n\n                        // https://code.google.com/p/webrtc/issues/detail\n                        // ?id=1508\n\n                        if (username) {\n                            const match\n                                = navigator.userAgent.match(\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\n\n                            if (match && parseInt(match[2], 10) < 28) {\n                                dict.urls += `${username}@`;\n                            } else {\n                                // only works in M28\n                                dict.username = username;\n                            }\n                        }\n                        dict.urls += el.attr('host');\n                        const port = el.attr('port');\n\n                        if (port) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        const transport = el.attr('transport');\n\n                        if (transport && transport !== 'udp') {\n                            dict.urls += `?transport=${transport}`;\n                        }\n\n                        dict.credential = el.attr('password')\n                                || dict.credential;\n                        iceservers.push(dict);\n                        break;\n                    }\n                    }\n                });\n\n                const options = this.xmpp.options;\n\n                if (options.useStunTurn) {\n                    // we want to filter and leave only tcp/turns candidates\n                    // which make sense for the jvb connections\n                    this.jvbIceConfig.iceServers\n                        = iceservers.filter(s => s.urls.startsWith('turns'));\n                }\n\n                if (options.p2p && options.p2p.useStunTurn) {\n                    this.p2pIceConfig.iceServers = iceservers;\n                }\n\n            }, err => {\n                logger.warn('getting turn credentials failed', err);\n                logger.warn('is mod_turncredentials or similar installed?');\n            });\n\n        // implement push?\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {Strophe.Connection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import async from 'async';\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        task(finishedCallback);\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Ping every 10 sec\n */\nconst PING_INTERVAL = 10000;\n\n/**\n * Ping timeout error after 15 sec of waiting.\n */\nconst PING_TIMEOUT = 15000;\n\n/**\n * Will close the connection after 3 consecutive ping errors.\n */\nconst PING_THRESHOLD = 3;\n\n/**\n * The number of timestamps of send pings to keep.\n * The current value is 2 minutes.\n * @type {number} number of timestamps.\n */\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Contructs new object\n     * @param {XMPP} xmpp the xmpp module.\n     * @constructor\n     */\n    constructor(xmpp) {\n        super();\n        this.failedPings = 0;\n        this.xmpp = xmpp;\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ(iq, success, error, timeout);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     * @param interval task interval in ms.\n     */\n    startInterval(remoteJid, interval = PING_INTERVAL) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n            this.ping(remoteJid, () => {\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= PING_THRESHOLD) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n\n                    // FIXME it doesn't help to disconnect when 3rd PING\n                    // times out, it only stops Strophe from retrying.\n                    // Not really sure what's the right thing to do in that\n                    // situation, but just closing the connection makes no\n                    // sense.\n                    // self.connection.disconnect();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, PING_TIMEOUT);\n        }, interval);\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= PING_INTERVAL;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * Detect user trying to speek while is locally muted and fires an event.\n */\nexport default class TalkMutedDetection {\n    /**\n     * Creates TalkMutedDetection\n     * @param conference the JitsiConference instance that created us.\n     * @param callback the callback to call when detected that the local user is\n     * talking while her microphone is muted.\n     * @constructor\n     */\n    constructor(conference, callback) {\n        /**\n         * The callback to call when detected that the local user is talking\n         * while her microphone is muted.\n         *\n         * @private\n         */\n        this._callback = callback;\n\n        /**\n         * The indicator which determines whether <tt>callback</tt> has been\n         * invoked for the current local audio track of <tt>conference</tt> so\n         * that it is invoked once only.\n         *\n         * @private\n         */\n        this._eventFired = false;\n\n        // XXX I went back and forth on the subject of where to put the access\n        // to statistics. On the one had, (1) statistics is likely intended to\n        // be private to conference and (2) there is a desire to keep the\n        // dependencies of modules to the minimum (i.e. not have\n        // TalkMutedDetection depend on statistics). On the other hand, (1)\n        // statistics is technically not private because\n        // JitsiConferenceEventManager accesses it and (2) TalkMutedDetection\n        // works exactly because it knows that there are no audio levels for\n        // JitsiLocalTrack but there are audio levels for the local participant\n        // through statistics.\n        conference.statistics.addAudioLevelListener(\n            this._audioLevel.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n        conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            this._trackAdded.bind(this));\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Receives audio level events for all send and receive streams.\n     *\n     * @param {TraceablePeerConnection} pc - WebRTC PeerConnection object of the\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of\n     * the endpoint/participant/stream being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt>.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> represents a\n     * local/send stream or <tt>false</tt> for a remote/receive stream.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio stream only and if event is not\n        // sent yet.\n        if (!isLocal || !this.audioTrack || this._eventFired) {\n            return;\n        }\n\n        if (this.audioTrack.isMuted()\n            && audioLevel > SPEECH_DETECT_THRESHOLD) {\n            this._eventFired = true;\n            this._callback();\n        }\n    }\n    /* eslint-enable max-params */\n\n    /**\n     * Determines whether a specific {@link JitsiTrack} represents a local audio\n     * track.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> to be checked whether\n     * it represents a local audio track.\n     * @private\n     * @return {boolean} - <tt>true</tt> if the specified <tt>track</tt>\n     * represents a local audio track; otherwise, <tt>false</tt>.\n     */\n    _isLocalAudioTrack(track) {\n        return track.isAudioTrack() && track.isLocal();\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that a {@link JitsiTrack} was\n     * added to the associated {@link JitsiConference}. Looks for the local\n     * audio track only.\n     *\n     * @param {JitsiTrack} track - The added <tt>JitsiTrack</tt>.\n     * @private\n     */\n    _trackAdded(track) {\n        if (this._isLocalAudioTrack(track)) {\n            this.audioTrack = track;\n        }\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that the mute state of a\n     * {@link JitsiTrack} has changed. Looks for the local audio track only.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> whose mute state has\n     * changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (this._isLocalAudioTrack(track) && track.isMuted()) {\n            this._eventFired = false;\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n        }\n    }\n}\n","import * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst VideoType = require('../../service/RTC/VideoType');\nconst Resolutions = require('../../service/RTC/Resolutions');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * See media/engine/simulcast.ss from webrtc.org\n */\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        max: 5000,\n        target: 4000,\n        min: 800 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        max: 2500,\n        target: 2500,\n        min: 600 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        max: 900,\n        target: 900,\n        min: 450 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        max: 700,\n        target: 500,\n        min: 150 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        max: 450,\n        target: 350,\n        min: 150 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        max: 200,\n        target: 150,\n        min: 30 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n\n/**\n * The current cap (in kbps) put on the video stream (or null if there isn't\n * a cap).  If there is a cap, we'll take it into account when calculating\n * the current quality.\n */\nlet videoBitrateCap = null;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video started.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    if (simulcast) {\n        // Find the first format with height no bigger than ours.\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n        if (simulcastFormat) {\n            // Sum the target fields from all simulcast layers for the given\n            // resolution (e.g. 720p + 360p + 180p).\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\n                const targetHeight = height;\n\n                simulcastFormat\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\n                if (simulcastFormat) {\n                    target += simulcastFormat.target;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        // See GetMaxDefaultVideoBitrateKbps in\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\n        const pixels = resolution.width * resolution.height;\n\n        if (pixels <= 320 * 240) {\n            target = 600;\n        } else if (pixels <= 640 * 480) {\n            target = 1700;\n        } else if (pixels <= 960 * 540) {\n            target = 2000;\n        } else {\n            target = 2500;\n        }\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second.\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        /**\n         * The time at which a video bitrate cap was last removed.  We use\n         * this to calculate how much time we, as a sender, have had to\n         * ramp-up\n         */\n        this._timeLastBwCapRemoved = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module\n        // and update the _localStats field.\n        // Oh, and by the way, the resolutions of all remote participants are\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\n        // if one carefully reads the *code* (but not the docs) in\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\n        // jitsi-meet\n        // TODO: We should keep track of the remote resolution in _remoteStats,\n        // and notify about changes via separate events.\n        conference.statistics.addConnectionStatsListener(\n            this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or\n     * a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the\n     * camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the sending bitrate.\n\n            // Figure out if simulcast is in use\n            const activeTPC = this._conference.getActivePeerConnection();\n            const isSimulcastOn\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\n\n            const newVideoBitrateCap\n                = activeTPC && activeTPC.bandwidthLimiter\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\n\n            // If we had a cap set but there isn't one now, then it has\n            // just been 'lifted', so we should treat this like a new\n            // ramp up.\n            if (!newVideoBitrateCap && videoBitrateCap) {\n                this._timeLastBwCapRemoved = window.performance.now();\n\n                // Set the start bitrate to whatever we were just capped to\n                startBitrate = videoBitrateCap;\n            }\n            videoBitrateCap = newVideoBitrateCap;\n\n            // time since sending of video was enabled.\n            const millisSinceStart = window.performance.now()\n                - Math.max(this._timeVideoUnmuted,\n                    this._timeIceConnected,\n                    this._timeLastBwCapRemoved);\n\n            // expected sending bitrate in perfect conditions\n            let target\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\n\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\n\n            if (videoBitrateCap) {\n                target = Math.min(target, videoBitrateCap);\n            }\n\n            quality = 100 * this._localStats.bitrate.upload / target;\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\n                    / 1000;\n\n            quality\n                = Math.min(\n                    quality,\n                    prevConnectionQuality\n                        + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.broadcastEndpointMessage({\n                type: STATS_MESSAGE_TYPE,\n                values: data });\n        } catch (e) {\n            // We often hit this in the beginning of a call, before the data\n            // channel is ready. It is not a big problem, because we will\n            // send the statistics again after a few seconds, and the error is\n            // already logged elsewhere. So just ignore it.\n\n            // let errorMsg = \"Failed to broadcast local stats\";\n            // logger.error(errorMsg, e);\n            // GlobalOnErrorHandler.callErrorHandler(\n            //    new Error(errorMsg + \": \" + e));\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack ? localVideoTrack.resolution : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A delayed ICE failed notification which is triggered only if the ICE\n * connection does not recover soon after or before the XMPP connection is\n * restored (if it was ever broken). If ICE fails while the XMPP connection is\n * not broken then the notifications will be sent after 2 seconds delay. This\n * extra delay is not intentional just a side effect of the code.\n * NOTE that this delayed task can only be used if PING is supported by the XMPP\n * server.\n */\nexport default class IceFailedNotification {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * Starts the task.\n     * @param {JingleSessionPC} session - the JVB Jingle session.\n     */\n    start(session) {\n        // The 65 seconds are greater than the default Prosody's BOSH\n        // timeout of 60. This gives some time for the XMPP connection\n        // to recover.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (this._canceled) {\n                    return;\n                }\n\n                if (this._conference.isJvbConnectionInterrupted) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        logger.info(\n                            'Sending ICE failed'\n                            + ' - the connection has not recovered');\n                        this._iceFailedTimeout = undefined;\n                        session.sendIceFailedNotification();\n                    }, 2000);\n                } else {\n                    logger.info(\n                        'ICE connection restored - not sending ICE failed');\n                }\n            },\n            error => {\n                logger.error(\n                    'PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        if (this._iceFailedTimeout) {\n            window.clearTimeout(this._iceFailedTimeout);\n        }\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import browser from '../browser';\nimport { createRttByRegionEvent }\n    from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport RTCUtils from '../RTC/RTCUtils';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The options to pass to createOffer (we need to offer to receive *something*\n * for the PC to gather candidates.\n */\nconst offerOptions = {\n    offerToReceiveAudio: 1,\n    offerToReceiveVideo: 0\n};\n\n\n/**\n * The interval at which the webrtc engine sends STUN keep alive requests.\n * @type {number}\n */\nconst stunKeepAliveIntervalMs = 10000;\n\n/**\n * Wraps a PeerConnection with one specific STUN server and measures the RTT\n * to the STUN server.\n */\nclass PCMonitor {\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {String} region - The region of the STUN server.\n     * @param {String} address - The address of the STUN server.\n     * @param {number} getStatsIntervalMs how often to call getStats.\n     * @param {number} delay the delay after which the PeerConnection will be\n     * started (that is, createOffer and setLocalDescription will be invoked).\n     *\n     */\n    constructor(region, address, getStatsIntervalMs, delay) {\n        /* eslint-disable max-params */\n        this.region = region;\n        this.getStatsIntervalMs = getStatsIntervalMs;\n        this.getStatsInterval = null;\n\n        // What we consider the current RTT. It is Math.min(this.rtts).\n        this.rtt = Infinity;\n\n        // The RTT measurements we've made from the latest getStats() calls.\n        this.rtts = [];\n\n        const iceServers = [ { 'url': `stun:${address}` } ];\n\n        this.pc = new RTCUtils.RTCPeerConnectionType(\n            {\n                'iceServers': iceServers\n            });\n\n        // Maps a key consisting of the IP address, port and priority of a\n        // candidate to some state related to it. If we have more than one\n        // network interface we will might multiple srflx candidates and this\n        // helps to distinguish between then.\n        this.candidates = {};\n\n        this.stopped = false;\n\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.startStatsInterval = this.startStatsInterval.bind(this);\n        this.handleCandidateRtt = this.handleCandidateRtt.bind(this);\n\n        window.setTimeout(this.start, delay);\n    }\n\n    /**\n     * Starts this PCMonitor. That is, invokes createOffer and\n     * setLocalDescription on the PeerConnection and starts an interval which\n     * calls getStats.\n     */\n    start() {\n        if (this.stopped) {\n            return;\n        }\n\n        this.pc.createOffer(offerOptions).then(offer => {\n            this.pc.setLocalDescription(\n                offer,\n                () => {\n                    logger.info(\n                        `setLocalDescription success for ${this.region}`);\n                    this.startStatsInterval();\n                },\n                error => {\n                    logger.warn(\n                        `setLocalDescription failed for ${this.region}: ${\n                            error}`);\n                }\n            );\n        });\n    }\n\n    /**\n     * Starts an interval which invokes getStats on the PeerConnection and\n     * measures the RTTs for the different candidates.\n     */\n    startStatsInterval() {\n        this.getStatsInterval = window.setInterval(\n            () => {\n                // Note that the data that we use to measure the RTT is only\n                // available in the legacy (callback based) getStats API.\n                this.pc.getStats(stats => {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n                        const rttTotal\n                            = Number(res.stat('stunKeepaliveRttTotal'));\n\n                        // We recognize the results that we care for (local\n                        // candidates of type srflx) by the existance of the\n                        // stunKeepaliveRttTotal stat.\n                        if (rttTotal > 0) {\n                            const candidateKey\n                                = `${res.stat('ipAddress')}_${\n                                    res.stat('portNumber')}_${\n                                    res.stat('priority')}`;\n\n                            this.handleCandidateRtt(\n                                candidateKey,\n                                rttTotal,\n                                Number(\n                                    res.stat('stunKeepaliveResponsesReceived')),\n                                Number(\n                                    res.stat('stunKeepaliveRequestsSent')));\n                        }\n                    }\n\n                    // After we've measured the RTT for all candidates we,\n                    // update the state of the PC with the shortest one.\n                    let rtt = Infinity;\n\n                    for (const key in this.candidates) {\n                        if (this.candidates.hasOwnProperty(key)\n                            && this.candidates[key].rtt > 0) {\n                            rtt = Math.min(rtt, this.candidates[key].rtt);\n                        }\n                    }\n\n                    // We keep the last 6 measured RTTs and choose the shortest\n                    // one to export to analytics. This is because we often see\n                    // failures get a real measurement which end up as Infinity.\n                    this.rtts.push(rtt);\n                    if (this.rtts.length > 6) {\n                        this.rtts = this.rtts.splice(1, 7);\n                    }\n                    this.rtt = Math.min(...this.rtts);\n                });\n            },\n            this.getStatsIntervalMs\n        );\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Updates the RTT for a candidate identified by \"key\" based on the values\n     * from getStats() and the previously saved state (i.e. old values).\n     *\n     * @param {String} key the ID for the candidate\n     * @param {number} rttTotal the value of the 'stunKeepaliveRttTotal' just\n     * measured.\n     * @param {number} responsesReceived the value of the\n     * 'stunKeepaliveResponsesReceived' stat just measured.\n     * @param {number} requestsSent the value of the 'stunKeepaliveRequestsSent'\n     * stat just measured.\n     */\n    handleCandidateRtt(key, rttTotal, responsesReceived, requestsSent) {\n        /* eslist-enable max-params */\n        if (!this.candidates[key]) {\n            this.candidates[key] = {\n                rttTotal: 0,\n                responsesReceived: 0,\n                requestsSent: 0,\n                rtt: NaN\n            };\n        }\n\n        const rttTotalDiff = rttTotal - this.candidates[key].rttTotal;\n        const responsesReceivedDiff\n            = responsesReceived - this.candidates[key].responsesReceived;\n\n        // We observe that when the difference between the number of requests\n        // and responses has grown (i.q. when the value below is positive), the\n        // the RTT measurements are incorrect (too low). For this reason we\n        // ignore these measurement (setting rtt=NaN), but update our state.\n        const requestsResponsesDiff\n            = (requestsSent - responsesReceived)\n            - (this.candidates[key].requestsSent\n                - this.candidates[key].responsesReceived);\n        let rtt = NaN;\n\n        if (responsesReceivedDiff > 0 && requestsResponsesDiff === 0) {\n            rtt = rttTotalDiff / responsesReceivedDiff;\n        }\n\n        this.candidates[key].rttTotal = rttTotal;\n        this.candidates[key].responsesReceived = responsesReceived;\n        this.candidates[key].requestsSent = requestsSent;\n        this.candidates[key].rtt = rtt;\n    }\n\n\n    /**\n     * Stops this PCMonitor, clearing its intervals and stopping the\n     * PeerConnection.\n     */\n    stop() {\n        if (this.getStatsInterval) {\n            window.clearInterval(this.getStatsInterval);\n        }\n\n        this.pc.close();\n\n        this.stopped = true;\n    }\n}\n\n/**\n * A class which monitors the round-trip time (RTT) to a set of STUN servers.\n * The measured RTTs are sent as analytics events. It uses a separate\n * PeerConnection (represented as a PCMonitor) for each STUN server.\n */\nexport default class RttMonitor {\n    /**\n     * Initializes a new RttMonitor.\n     * @param {Object} config the object holding the configuration.\n     */\n    constructor(config) {\n        if (!config || !config.enabled\n            || !browser.supportsLocalCandidateRttStatistics()) {\n            return;\n        }\n\n        // Maps a region to the PCMonitor instance for that region.\n        this.pcMonitors = {};\n\n        this.startPCMonitors = this.startPCMonitors.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n        this.stop = this.stop.bind(this);\n\n        this.analyticsInterval = null;\n        this.stopped = false;\n\n        const initialDelay = config.initialDelay || 60000;\n\n\n        logger.info(\n            `Starting RTT monitor with an initial delay of ${initialDelay}`);\n\n\n        window.setTimeout(\n            () => this.startPCMonitors(config),\n            initialDelay);\n    }\n\n    /**\n     * Starts the PCMonitors according to the configuration.\n     */\n    startPCMonitors(config) {\n        if (!config.stunServers) {\n            logger.warn('No stun servers configured.');\n\n            return;\n        }\n\n        if (this.stopped) {\n            return;\n        }\n\n        const getStatsIntervalMs\n            = config.getStatsInterval || stunKeepAliveIntervalMs;\n        const analyticsIntervalMs\n            = config.analyticsInterval || getStatsIntervalMs;\n        const count = Object.keys(config.stunServers).length;\n        const offset = getStatsIntervalMs / count;\n\n        // We delay the initialization of each PC so that they are uniformly\n        // distributed across the getStatsIntervalMs.\n        let i = 0;\n\n        for (const region in config.stunServers) {\n            if (config.stunServers.hasOwnProperty(region)) {\n                const address = config.stunServers[region];\n\n                this.pcMonitors[region]\n                    = new PCMonitor(\n                        region,\n                        address,\n                        getStatsIntervalMs,\n                        offset * i);\n                i++;\n            }\n        }\n\n        window.setTimeout(\n            () => {\n                if (!this.stopped) {\n                    this.analyticsInterval\n                        = window.setInterval(\n                        this.sendAnalytics, analyticsIntervalMs);\n                }\n            },\n            1000);\n    }\n\n    /**\n     * Sends an analytics event with the measured RTT to each region/STUN\n     * server.\n     */\n    sendAnalytics() {\n        const rtts = {};\n\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                const rtt = this.pcMonitors[region].rtt;\n\n                if (!isNaN(rtt) && rtt !== Infinity) {\n                    rtts[region.replace('-', '_')] = rtt;\n                }\n            }\n        }\n\n        if (rtts) {\n            Statistics.sendAnalytics(createRttByRegionEvent(rtts));\n        }\n    }\n\n    /**\n     * Stops this RttMonitor, clearing all intervals and closing all\n     * PeerConnections.\n     */\n    stop() {\n        logger.info('Stopping RttMonitor.');\n        this.stopped = true;\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                this.pcMonitors[region].stop();\n            }\n        }\n        this.pcMonitors = {};\n\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n}\n","/* global __filename */\nimport isEqual from 'lodash.isequal';\n\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport Statistics from './statistics';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport SpeakerStats from './SpeakerStats';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio the the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTC from '../RTC/RTC';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference} to be passed in. {@code ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(this, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport AuthUtil from './modules/util/AuthUtil';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport Logger from 'jitsi-meet-logger';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport Statistics from './modules/statistics/statistics';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {object} options.desktopSharingExtensionExternalInstallation -\n     * enables external installation process for desktop sharing extension if\n     * the inline installation is not posible. The following properties should\n     * be provided:\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        if (firePermissionPromptIsShownEvent === true) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                        browser.getName());\n                }\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = options.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        options.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            options,\n                            undefined,\n                            originalOptions || Object.assign({}, options));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'chrome_extension_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar adapterFactory = require('./adapter_factory.js');\nmodule.exports = adapterFactory({window: global.window});\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar utils = require('./utils');\n// Shimming starts here.\nmodule.exports = function(dependencies, opts) {\n  var window = dependencies && dependencies.window;\n\n  var options = {\n    shimChrome: true,\n    shimFirefox: true,\n    shimEdge: true,\n    shimSafari: true,\n  };\n\n  for (var key in opts) {\n    if (hasOwnProperty.call(opts, key)) {\n      options[key] = opts[key];\n    }\n  }\n\n  // Utils.\n  var logging = utils.log;\n  var browserDetails = utils.detectBrowser(window);\n\n  // Export to the adapter global object visible in the browser.\n  var adapter = {\n    browserDetails: browserDetails,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Uncomment the line below if you want logging to occur, including logging\n  // for the switch statement below. Can also be turned on in the browser via\n  // adapter.disableLog(false), but then logging from the switch statement below\n  // will not appear.\n  // require('./utils').disableLog(false);\n\n  // Browser shims.\n  var chromeShim = require('./chrome/chrome_shim') || null;\n  var edgeShim = require('./edge/edge_shim') || null;\n  var firefoxShim = require('./firefox/firefox_shim') || null;\n  var safariShim = require('./safari/safari_shim') || null;\n  var commonShim = require('./common_shim') || null;\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimSourceObject(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n      commonShim.shimCreateObjectURL(window);\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimSourceObject(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n      commonShim.shimCreateObjectURL(window);\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n      safariShim.shimCreateOfferLegacy(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n};\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\nvar chromeShim = {\n  shimMediaStream: function(window) {\n    window.MediaStream = window.MediaStream || window.webkitMediaStream;\n  },\n\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n          }\n          this.addEventListener('track', this._ontrack = f);\n        }\n      });\n      var origSetRemoteDescription =\n          window.RTCPeerConnection.prototype.setRemoteDescription;\n      window.RTCPeerConnection.prototype.setRemoteDescription = function() {\n        var pc = this;\n        if (!pc._ontrackpoly) {\n          pc._ontrackpoly = function(e) {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', function(te) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === te.track.id;\n                });\n              } else {\n                receiver = {track: te.track};\n              }\n\n              var event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(function(track) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === track.id;\n                });\n              } else {\n                receiver = {track: track};\n              }\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n          };\n          pc.addEventListener('addstream', pc._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n    }\n  },\n\n  shimGetSendersWithDtmf: function(window) {\n    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        !('getSenders' in window.RTCPeerConnection.prototype) &&\n        'createDTMFSender' in window.RTCPeerConnection.prototype) {\n      var shimSenderWithDtmf = function(pc, track) {\n        return {\n          track: track,\n          get dtmf() {\n            if (this._dtmf === undefined) {\n              if (track.kind === 'audio') {\n                this._dtmf = pc.createDTMFSender(track);\n              } else {\n                this._dtmf = null;\n              }\n            }\n            return this._dtmf;\n          },\n          _pc: pc\n        };\n      };\n\n      // augment addTrack when getSenders is not available.\n      if (!window.RTCPeerConnection.prototype.getSenders) {\n        window.RTCPeerConnection.prototype.getSenders = function() {\n          this._senders = this._senders || [];\n          return this._senders.slice(); // return a copy of the internal state.\n        };\n        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n        window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n          var pc = this;\n          var sender = origAddTrack.apply(pc, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(pc, track);\n            pc._senders.push(sender);\n          }\n          return sender;\n        };\n\n        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n        window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n          var pc = this;\n          origRemoveTrack.apply(pc, arguments);\n          var idx = pc._senders.indexOf(sender);\n          if (idx !== -1) {\n            pc._senders.splice(idx, 1);\n          }\n        };\n      }\n      var origAddStream = window.RTCPeerConnection.prototype.addStream;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origAddStream.apply(pc, [stream]);\n        stream.getTracks().forEach(function(track) {\n          pc._senders.push(shimSenderWithDtmf(pc, track));\n        });\n      };\n\n      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origRemoveStream.apply(pc, [stream]);\n\n        stream.getTracks().forEach(function(track) {\n          var sender = pc._senders.find(function(s) {\n            return s.track === track;\n          });\n          if (sender) {\n            pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender\n          }\n        });\n      };\n    } else if (typeof window === 'object' && window.RTCPeerConnection &&\n               'getSenders' in window.RTCPeerConnection.prototype &&\n               'createDTMFSender' in window.RTCPeerConnection.prototype &&\n               window.RTCRtpSender &&\n               !('dtmf' in window.RTCRtpSender.prototype)) {\n      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n      window.RTCPeerConnection.prototype.getSenders = function() {\n        var pc = this;\n        var senders = origGetSenders.apply(pc, []);\n        senders.forEach(function(sender) {\n          sender._pc = pc;\n        });\n        return senders;\n      };\n\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = this._pc.createDTMFSender(this.track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    var URL = window && window.URL;\n\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this._srcObject;\n          },\n          set: function(stream) {\n            var self = this;\n            // Use _srcObject as a private property for this shim\n            this._srcObject = stream;\n            if (this.src) {\n              URL.revokeObjectURL(this.src);\n            }\n\n            if (!stream) {\n              this.src = '';\n              return undefined;\n            }\n            this.src = URL.createObjectURL(stream);\n            // We need to recreate the blob url when a track is added or\n            // removed. Doing it manually since we want to avoid a recursion.\n            stream.addEventListener('addtrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n            stream.addEventListener('removetrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n          }\n        });\n      }\n    }\n  },\n\n  shimAddTrackRemoveTrack: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n    // shim addTrack and removeTrack.\n    if (window.RTCPeerConnection.prototype.addTrack &&\n        browserDetails.version >= 63) {\n      return;\n    }\n\n    // also shim pc.getLocalStreams when addTrack is shimmed\n    // to return the original streams.\n    var origGetLocalStreams = window.RTCPeerConnection.prototype\n        .getLocalStreams;\n    window.RTCPeerConnection.prototype.getLocalStreams = function() {\n      var self = this;\n      var nativeStreams = origGetLocalStreams.apply(this);\n      self._reverseStreams = self._reverseStreams || {};\n      return nativeStreams.map(function(stream) {\n        return self._reverseStreams[stream.id];\n      });\n    };\n\n    var origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      stream.getTracks().forEach(function(track) {\n        var alreadyExists = pc.getSenders().find(function(s) {\n          return s.track === track;\n        });\n        if (alreadyExists) {\n          throw new DOMException('Track already exists.',\n              'InvalidAccessError');\n        }\n      });\n      // Add identity mapping for consistency with addTrack.\n      // Unless this is being used with a stream from addTrack.\n      if (!pc._reverseStreams[stream.id]) {\n        var newStream = new window.MediaStream(stream.getTracks());\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        stream = newStream;\n      }\n      origAddStream.apply(pc, [stream]);\n    };\n\n    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);\n      delete pc._reverseStreams[(pc._streams[stream.id] ?\n          pc._streams[stream.id].id : stream.id)];\n      delete pc._streams[stream.id];\n    };\n\n    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      var streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(function(t) {\n            return t === track;\n          })) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      var alreadyExists = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n      var oldStream = pc._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(function() {\n          pc.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        var newStream = new window.MediaStream([track]);\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        pc.addStream(newStream);\n      }\n      return pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n    };\n\n    // replace the internal stream id with the external one and\n    // vice versa.\n    function replaceInternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n            externalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    function replaceExternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n            internalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    ['createOffer', 'createAnswer'].forEach(function(method) {\n      var nativeMethod = window.RTCPeerConnection.prototype[method];\n      window.RTCPeerConnection.prototype[method] = function() {\n        var pc = this;\n        var args = arguments;\n        var isLegacyCall = arguments.length &&\n            typeof arguments[0] === 'function';\n        if (isLegacyCall) {\n          return nativeMethod.apply(pc, [\n            function(description) {\n              var desc = replaceInternalStreamId(pc, description);\n              args[0].apply(null, [desc]);\n            },\n            function(err) {\n              if (args[1]) {\n                args[1].apply(null, err);\n              }\n            }, arguments[2]\n          ]);\n        }\n        return nativeMethod.apply(pc, arguments)\n        .then(function(description) {\n          return replaceInternalStreamId(pc, description);\n        });\n      };\n    });\n\n    var origSetLocalDescription =\n        window.RTCPeerConnection.prototype.setLocalDescription;\n    window.RTCPeerConnection.prototype.setLocalDescription = function() {\n      var pc = this;\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(pc, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(pc, arguments[0]);\n      return origSetLocalDescription.apply(pc, arguments);\n    };\n\n    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n    var origLocalDescription = Object.getOwnPropertyDescriptor(\n        window.RTCPeerConnection.prototype, 'localDescription');\n    Object.defineProperty(window.RTCPeerConnection.prototype,\n        'localDescription', {\n          get: function() {\n            var pc = this;\n            var description = origLocalDescription.get.apply(this);\n            if (description.type === '') {\n              return description;\n            }\n            return replaceInternalStreamId(pc, description);\n          }\n        });\n\n    window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      var isLocal = sender._pc === pc;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      pc._streams = pc._streams || {};\n      var stream;\n      Object.keys(pc._streams).forEach(function(streamid) {\n        var hasTrack = pc._streams[streamid].getTracks().find(function(track) {\n          return sender.track === track;\n        });\n        if (hasTrack) {\n          stream = pc._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          pc.removeStream(pc._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        pc.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        // Translate iceTransportPolicy to iceTransports,\n        // see https://code.google.com/p/webrtc/issues/detail?id=4869\n        // this was fixed in M56 along with unprefixing RTCPeerConnection.\n        logging('PeerConnection');\n        if (pcConfig && pcConfig.iceTransportPolicy) {\n          pcConfig.iceTransports = pcConfig.iceTransportPolicy;\n        }\n\n        return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.webkitRTCPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      if (window.webkitRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.webkitRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n    } else {\n      // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n      var OrigPeerConnection = window.RTCPeerConnection;\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (pcConfig && pcConfig.iceServers) {\n          var newIceServers = [];\n          for (var i = 0; i < pcConfig.iceServers.length; i++) {\n            var server = pcConfig.iceServers[i];\n            if (!server.hasOwnProperty('urls') &&\n                server.hasOwnProperty('url')) {\n              utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n              server = JSON.parse(JSON.stringify(server));\n              server.urls = server.url;\n              newIceServers.push(server);\n            } else {\n              newIceServers.push(pcConfig.iceServers[i]);\n            }\n          }\n          pcConfig.iceServers = newIceServers;\n        }\n        return new OrigPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n\n    var origGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(selector,\n        successCallback, errorCallback) {\n      var self = this;\n      var args = arguments;\n\n      // If selector is a function then we are in the old style stats so just\n      // pass back the original getStats format to avoid breaking old users.\n      if (arguments.length > 0 && typeof selector === 'function') {\n        return origGetStats.apply(this, arguments);\n      }\n\n      // When spec-style getStats is supported, return those when called with\n      // either no arguments or the selector argument is null.\n      if (origGetStats.length === 0 && (arguments.length === 0 ||\n          typeof arguments[0] !== 'function')) {\n        return origGetStats.apply(this, []);\n      }\n\n      var fixChromeStats_ = function(response) {\n        var standardReport = {};\n        var reports = response.result();\n        reports.forEach(function(report) {\n          var standardStats = {\n            id: report.id,\n            timestamp: report.timestamp,\n            type: {\n              localcandidate: 'local-candidate',\n              remotecandidate: 'remote-candidate'\n            }[report.type] || report.type\n          };\n          report.names().forEach(function(name) {\n            standardStats[name] = report.stat(name);\n          });\n          standardReport[standardStats.id] = standardStats;\n        });\n\n        return standardReport;\n      };\n\n      // shim getStats with maplike support\n      var makeMapStats = function(stats) {\n        return new Map(Object.keys(stats).map(function(key) {\n          return [key, stats[key]];\n        }));\n      };\n\n      if (arguments.length >= 2) {\n        var successCallbackWrapper_ = function(response) {\n          args[1](makeMapStats(fixChromeStats_(response)));\n        };\n\n        return origGetStats.apply(this, [successCallbackWrapper_,\n          arguments[0]]);\n      }\n\n      // promise-support\n      return new Promise(function(resolve, reject) {\n        origGetStats.apply(self, [\n          function(response) {\n            resolve(makeMapStats(fixChromeStats_(response)));\n          }, reject]);\n      }).then(successCallback, errorCallback);\n    };\n\n    // add promise support -- natively available in Chrome 51\n    if (browserDetails.version < 51) {\n      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n          .forEach(function(method) {\n            var nativeMethod = window.RTCPeerConnection.prototype[method];\n            window.RTCPeerConnection.prototype[method] = function() {\n              var args = arguments;\n              var self = this;\n              var promise = new Promise(function(resolve, reject) {\n                nativeMethod.apply(self, [args[0], resolve, reject]);\n              });\n              if (args.length < 2) {\n                return promise;\n              }\n              return promise.then(function() {\n                args[1].apply(null, []);\n              },\n              function(err) {\n                if (args.length >= 3) {\n                  args[2].apply(null, [err]);\n                }\n              });\n            };\n          });\n    }\n\n    // promise support for createOffer and createAnswer. Available (without\n    // bugs) since M52: crbug/619289\n    if (browserDetails.version < 52) {\n      ['createOffer', 'createAnswer'].forEach(function(method) {\n        var nativeMethod = window.RTCPeerConnection.prototype[method];\n        window.RTCPeerConnection.prototype[method] = function() {\n          var self = this;\n          if (arguments.length < 1 || (arguments.length === 1 &&\n              typeof arguments[0] === 'object')) {\n            var opts = arguments.length === 1 ? arguments[0] : undefined;\n            return new Promise(function(resolve, reject) {\n              nativeMethod.apply(self, [resolve, reject, opts]);\n            });\n          }\n          return nativeMethod.apply(this, arguments);\n        };\n      });\n    }\n\n    // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n};\n\n\n// Expose public methods.\nmodule.exports = {\n  shimMediaStream: chromeShim.shimMediaStream,\n  shimOnTrack: chromeShim.shimOnTrack,\n  shimAddTrackRemoveTrack: chromeShim.shimAddTrackRemoveTrack,\n  shimGetSendersWithDtmf: chromeShim.shimGetSendersWithDtmf,\n  shimSourceObject: chromeShim.shimSourceObject,\n  shimPeerConnection: chromeShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n\n  var constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    var cc = {};\n    Object.keys(c).forEach(function(key) {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      var oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        var oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(function(mix) {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  var shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      var remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      var face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      var getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        var matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(function(devices) {\n            devices = devices.filter(function(d) {\n              return d.kind === 'videoinput';\n            });\n            var dev = devices.find(function(d) {\n              return matches.some(function(match) {\n                return d.label.toLowerCase().indexOf(match) !== -1;\n              });\n            });\n            if (!dev && devices.length && matches.indexOf('back') !== -1) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        InvalidStateError: 'NotReadableError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotReadableError',\n        MediaDeviceKillSwitchOn: 'NotReadableError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraintName,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, function(c) {\n      navigator.webkitGetUserMedia(c, onSuccess, function(e) {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n\n  navigator.getUserMedia = getUserMedia_;\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      navigator.getUserMedia(constraints, resolve, reject);\n    });\n  };\n\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {\n      getUserMedia: getUserMediaPromise_,\n      enumerateDevices: function() {\n        return new Promise(function(resolve) {\n          var kinds = {audio: 'audioinput', video: 'videoinput'};\n          return window.MediaStreamTrack.getSources(function(devices) {\n            resolve(devices.map(function(device) {\n              return {label: device.label,\n                kind: kinds[device.kind],\n                deviceId: device.id,\n                groupId: ''};\n            }));\n          });\n        });\n      },\n      getSupportedConstraints: function() {\n        return {\n          deviceId: true, echoCancellation: true, facingMode: true,\n          frameRate: true, height: true, width: true\n        };\n      }\n    };\n  }\n\n  // A shim for getUserMedia method on the mediaDevices object.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (!navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n      return getUserMediaPromise_(constraints);\n    };\n  } else {\n    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n    // function which returns a Promise, it does not accept spec-style\n    // constraints.\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, function(c) {\n        return origGetUserMedia(c).then(function(stream) {\n          if (c.audio && !stream.getAudioTracks().length ||\n              c.video && !stream.getVideoTracks().length) {\n            stream.getTracks().forEach(function(track) {\n              track.stop();\n            });\n            throw new DOMException('', 'NotFoundError');\n          }\n          return stream;\n        }, function(e) {\n          return Promise.reject(shimError_(e));\n        });\n      });\n    };\n  }\n\n  // Dummy devicechange event methods.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\n    navigator.mediaDevices.addEventListener = function() {\n      logging('Dummy mediaDevices.addEventListener called.');\n    };\n  }\n  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\n    navigator.mediaDevices.removeEventListener = function() {\n      logging('Dummy mediaDevices.removeEventListener called.');\n    };\n  }\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar shimRTCPeerConnection = require('rtcpeerconnection-shim');\n\nmodule.exports = {\n  shimGetUserMedia: require('./getusermedia'),\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (window.RTCIceGatherer) {\n      // ORTC defines an RTCIceCandidate object but no constructor.\n      // Not implemented in Edge.\n      if (!window.RTCIceCandidate) {\n        window.RTCIceCandidate = function(args) {\n          return args;\n        };\n      }\n      // ORTC does not have a session description object but\n      // other browsers (i.e. Chrome) that will support both PC and ORTC\n      // in the future might have this defined already.\n      if (!window.RTCSessionDescription) {\n        window.RTCSessionDescription = function(args) {\n          return args;\n        };\n      }\n      // this adds an additional event listener to MediaStrackTrack that signals\n      // when a tracks enabled property was changed. Workaround for a bug in\n      // addStream, see below. No longer required in 15025+\n      if (browserDetails.version < 15025) {\n        var origMSTEnabled = Object.getOwnPropertyDescriptor(\n            window.MediaStreamTrack.prototype, 'enabled');\n        Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n          set: function(value) {\n            origMSTEnabled.set.call(this, value);\n            var ev = new Event('enabled');\n            ev.enabled = value;\n            this.dispatchEvent(ev);\n          }\n        });\n      }\n    }\n\n    // ORTC defines the DTMF sender a bit different.\n    // https://github.com/w3c/ortc/issues/714\n    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = new window.RTCDtmfSender(this);\n            } else if (this.track.kind === 'video') {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n\n    window.RTCPeerConnection =\n        shimRTCPeerConnection(window, browserDetails.version);\n  },\n  shimReplaceTrack: function(window) {\n    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n    if (window.RTCRtpSender &&\n        !('replaceTrack' in window.RTCRtpSender.prototype)) {\n      window.RTCRtpSender.prototype.replaceTrack =\n          window.RTCRtpSender.prototype.setTrack;\n    }\n  }\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var navigator = window && window.navigator;\n\n  var shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(function(e) {\n      return Promise.reject(shimError_(e));\n    });\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\n\nvar firefoxShim = {\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function(e) {\n            e.stream.getTracks().forEach(function(track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {track: track};\n              event.transceiver = {receiver: event.receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n    if (typeof window === 'object' && window.RTCTrackEvent &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        !('transceiver' in window.RTCTrackEvent.prototype)) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this.mozSrcObject;\n          },\n          set: function(stream) {\n            this.mozSrcObject = stream;\n          }\n        });\n      }\n    }\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (typeof window !== 'object' || !(window.RTCPeerConnection ||\n        window.mozRTCPeerConnection)) {\n      return; // probably media.peerconnection.enabled=false in about:config\n    }\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (browserDetails.version < 38) {\n          // .urls is not supported in FF < 38.\n          // create RTCIceServers with a single url.\n          if (pcConfig && pcConfig.iceServers) {\n            var newIceServers = [];\n            for (var i = 0; i < pcConfig.iceServers.length; i++) {\n              var server = pcConfig.iceServers[i];\n              if (server.hasOwnProperty('urls')) {\n                for (var j = 0; j < server.urls.length; j++) {\n                  var newServer = {\n                    url: server.urls[j]\n                  };\n                  if (server.urls[j].indexOf('turn') === 0) {\n                    newServer.username = server.username;\n                    newServer.credential = server.credential;\n                  }\n                  newIceServers.push(newServer);\n                }\n              } else {\n                newIceServers.push(pcConfig.iceServers[i]);\n              }\n            }\n            pcConfig.iceServers = newIceServers;\n          }\n        }\n        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.mozRTCPeerConnection.prototype;\n\n      // wrap static methods. Currently just generateCertificate.\n      if (window.mozRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.mozRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n\n      window.RTCSessionDescription = window.mozRTCSessionDescription;\n      window.RTCIceCandidate = window.mozRTCIceCandidate;\n    }\n\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n\n    // shim getStats with maplike support\n    var makeMapStats = function(stats) {\n      var map = new Map();\n      Object.keys(stats).forEach(function(key) {\n        map.set(key, stats[key]);\n        map[key] = stats[key];\n      });\n      return map;\n    };\n\n    var modernStatsTypes = {\n      inboundrtp: 'inbound-rtp',\n      outboundrtp: 'outbound-rtp',\n      candidatepair: 'candidate-pair',\n      localcandidate: 'local-candidate',\n      remotecandidate: 'remote-candidate'\n    };\n\n    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(\n      selector,\n      onSucc,\n      onErr\n    ) {\n      return nativeGetStats.apply(this, [selector || null])\n        .then(function(stats) {\n          if (browserDetails.version < 48) {\n            stats = makeMapStats(stats);\n          }\n          if (browserDetails.version < 53 && !onSucc) {\n            // Shim only promise getStats with spec-hyphens in type names\n            // Leave callback version alone; misc old uses of forEach before Map\n            try {\n              stats.forEach(function(stat) {\n                stat.type = modernStatsTypes[stat.type] || stat.type;\n              });\n            } catch (e) {\n              if (e.name !== 'TypeError') {\n                throw e;\n              }\n              // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n              stats.forEach(function(stat, i) {\n                stats.set(i, Object.assign({}, stat, {\n                  type: modernStatsTypes[stat.type] || stat.type\n                }));\n              });\n            }\n          }\n          return stats;\n        })\n        .then(onSucc, onErr);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimOnTrack: firefoxShim.shimOnTrack,\n  shimSourceObject: firefoxShim.shimSourceObject,\n  shimPeerConnection: firefoxShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n  var MediaStreamTrack = window && window.MediaStreamTrack;\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        InternalError: 'NotReadableError',\n        NotSupportedError: 'TypeError',\n        PermissionDeniedError: 'NotAllowedError',\n        SecurityError: 'NotAllowedError'\n      }[e.name] || e.name,\n      message: {\n        'The operation is insecure.': 'The request is not allowed by the ' +\n        'user agent or the platform in the current context.'\n      }[e.message] || e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  // getUserMedia constraints shim.\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    var constraintsToFF37_ = function(c) {\n      if (typeof c !== 'object' || c.require) {\n        return c;\n      }\n      var require = [];\n      Object.keys(c).forEach(function(key) {\n        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n          return;\n        }\n        var r = c[key] = (typeof c[key] === 'object') ?\n            c[key] : {ideal: c[key]};\n        if (r.min !== undefined ||\n            r.max !== undefined || r.exact !== undefined) {\n          require.push(key);\n        }\n        if (r.exact !== undefined) {\n          if (typeof r.exact === 'number') {\n            r. min = r.max = r.exact;\n          } else {\n            c[key] = r.exact;\n          }\n          delete r.exact;\n        }\n        if (r.ideal !== undefined) {\n          c.advanced = c.advanced || [];\n          var oc = {};\n          if (typeof r.ideal === 'number') {\n            oc[key] = {min: r.ideal, max: r.ideal};\n          } else {\n            oc[key] = r.ideal;\n          }\n          c.advanced.push(oc);\n          delete r.ideal;\n          if (!Object.keys(r).length) {\n            delete c[key];\n          }\n        }\n      });\n      if (require.length) {\n        c.require = require;\n      }\n      return c;\n    };\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (browserDetails.version < 38) {\n      logging('spec: ' + JSON.stringify(constraints));\n      if (constraints.audio) {\n        constraints.audio = constraintsToFF37_(constraints.audio);\n      }\n      if (constraints.video) {\n        constraints.video = constraintsToFF37_(constraints.video);\n      }\n      logging('ff37: ' + JSON.stringify(constraints));\n    }\n    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {\n      onError(shimError_(e));\n    });\n  };\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      getUserMedia_(constraints, resolve, reject);\n    });\n  };\n\n  // Shim for mediaDevices on older versions.\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,\n      addEventListener: function() { },\n      removeEventListener: function() { }\n    };\n  }\n  navigator.mediaDevices.enumerateDevices =\n      navigator.mediaDevices.enumerateDevices || function() {\n        return new Promise(function(resolve) {\n          var infos = [\n            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\n            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\n          ];\n          resolve(infos);\n        });\n      };\n\n  if (browserDetails.version < 41) {\n    // Work around http://bugzil.la/1169665\n    var orgEnumerateDevices =\n        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\n    navigator.mediaDevices.enumerateDevices = function() {\n      return orgEnumerateDevices().then(undefined, function(e) {\n        if (e.name === 'NotFoundError') {\n          return [];\n        }\n        throw e;\n      });\n    };\n  }\n  if (browserDetails.version < 49) {\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      return origGetUserMedia(c).then(function(stream) {\n        // Work around https://bugzil.la/802326\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(function(track) {\n            track.stop();\n          });\n          throw new DOMException('The object can not be found here.',\n                                 'NotFoundError');\n        }\n        return stream;\n      }, function(e) {\n        return Promise.reject(shimError_(e));\n      });\n    };\n  }\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    var remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        var obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    if (browserDetails.version < 44) {\n      return getUserMedia_(constraints, onSuccess, onError);\n    }\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nvar utils = require('../utils');\n\nvar safariShim = {\n  // TODO: DrAlex, should be here, double check against LayoutTests\n\n  // TODO: once the back-end for the mac port is done, add.\n  // TODO: check for webkitGTK+\n  // shimPeerConnection: function() { },\n\n  shimLocalStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getLocalStreams = function() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n    }\n    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getStreamById = function(id) {\n        var result = null;\n        if (this._localStreams) {\n          this._localStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        if (this._remoteStreams) {\n          this._remoteStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        return result;\n      };\n    }\n    if (!('addStream' in window.RTCPeerConnection.prototype)) {\n      var _addTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        if (this._localStreams.indexOf(stream) === -1) {\n          this._localStreams.push(stream);\n        }\n        var self = this;\n        stream.getTracks().forEach(function(track) {\n          _addTrack.call(self, track, stream);\n        });\n      };\n\n      window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (this._localStreams.indexOf(stream) === -1) {\n            this._localStreams.push(stream);\n          }\n        }\n        _addTrack.call(this, track, stream);\n      };\n    }\n    if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        var index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        var self = this;\n        var tracks = stream.getTracks();\n        this.getSenders().forEach(function(sender) {\n          if (tracks.indexOf(sender.track) !== -1) {\n            self.removeTrack(sender);\n          }\n        });\n      };\n    }\n  },\n  shimRemoteStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getRemoteStreams = function() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n    }\n    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n        get: function() {\n          return this._onaddstream;\n        },\n        set: function(f) {\n          if (this._onaddstream) {\n            this.removeEventListener('addstream', this._onaddstream);\n            this.removeEventListener('track', this._onaddstreampoly);\n          }\n          this.addEventListener('addstream', this._onaddstream = f);\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            var stream = e.streams[0];\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.indexOf(stream) >= 0) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            var event = new Event('addstream');\n            event.stream = e.streams[0];\n            this.dispatchEvent(event);\n          }.bind(this));\n        }\n      });\n    }\n  },\n  shimCallbacksAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    var prototype = window.RTCPeerConnection.prototype;\n    var createOffer = prototype.createOffer;\n    var createAnswer = prototype.createAnswer;\n    var setLocalDescription = prototype.setLocalDescription;\n    var setRemoteDescription = prototype.setRemoteDescription;\n    var addIceCandidate = prototype.addIceCandidate;\n\n    prototype.createOffer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    prototype.createAnswer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    var withCallback = function(description, successCallback, failureCallback) {\n      var promise = setLocalDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setLocalDescription = withCallback;\n\n    withCallback = function(description, successCallback, failureCallback) {\n      var promise = setRemoteDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setRemoteDescription = withCallback;\n\n    withCallback = function(candidate, successCallback, failureCallback) {\n      var promise = addIceCandidate.apply(this, [candidate]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.addIceCandidate = withCallback;\n  },\n  shimGetUserMedia: function(window) {\n    var navigator = window && window.navigator;\n\n    if (!navigator.getUserMedia) {\n      if (navigator.webkitGetUserMedia) {\n        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n      } else if (navigator.mediaDevices &&\n          navigator.mediaDevices.getUserMedia) {\n        navigator.getUserMedia = function(constraints, cb, errcb) {\n          navigator.mediaDevices.getUserMedia(constraints)\n          .then(cb, errcb);\n        }.bind(navigator);\n      }\n    }\n  },\n  shimRTCIceServerUrls: function(window) {\n    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n    var OrigPeerConnection = window.RTCPeerConnection;\n    window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        var newIceServers = [];\n        for (var i = 0; i < pcConfig.iceServers.length; i++) {\n          var server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n    // wrap static methods. Currently just generateCertificate.\n    if ('generateCertificate' in window.RTCPeerConnection) {\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n  },\n  shimTrackEventTransceiver: function(window) {\n    // Add event.transceiver member over deprecated event.receiver\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is\n        // defined for some reason even when window.RTCTransceiver is not.\n        !window.RTCTransceiver) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimCreateOfferLegacy: function(window) {\n    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n    window.RTCPeerConnection.prototype.createOffer = function(offerOptions) {\n      var pc = this;\n      if (offerOptions) {\n        var audioTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'audio';\n        });\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            audioTransceiver.setDirection('sendonly');\n          } else if (audioTransceiver.direction === 'recvonly') {\n            audioTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          pc.addTransceiver('audio');\n        }\n\n        var videoTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'video';\n        });\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            videoTransceiver.setDirection('sendonly');\n          } else if (videoTransceiver.direction === 'recvonly') {\n            videoTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          pc.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(pc, arguments);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimCallbacksAPI: safariShim.shimCallbacksAPI,\n  shimLocalStreamsAPI: safariShim.shimLocalStreamsAPI,\n  shimRemoteStreamsAPI: safariShim.shimRemoteStreamsAPI,\n  shimGetUserMedia: safariShim.shimGetUserMedia,\n  shimRTCIceServerUrls: safariShim.shimRTCIceServerUrls,\n  shimTrackEventTransceiver: safariShim.shimTrackEventTransceiver,\n  shimCreateOfferLegacy: safariShim.shimCreateOfferLegacy\n  // TODO\n  // shimPeerConnection: safariShim.shimPeerConnection\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\nvar utils = require('./utils');\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object.\nfunction wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  var proto = window.RTCPeerConnection.prototype;\n  var nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    var wrappedCallback = function(e) {\n      cb(wrapper(e));\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  var nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    var unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get: function() {\n      return this['_on' + eventNameToWrap];\n    },\n    set: function(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  shimRTCIceCandidate: function(window) {\n    // foundation is arbitrarily chosen as an indicator for full support for\n    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n    if (window.RTCIceCandidate && 'foundation' in\n        window.RTCIceCandidate.prototype) {\n      return;\n    }\n\n    var NativeRTCIceCandidate = window.RTCIceCandidate;\n    window.RTCIceCandidate = function(args) {\n      // Remove the a= which shouldn't be part of the candidate string.\n      if (typeof args === 'object' && args.candidate &&\n          args.candidate.indexOf('a=') === 0) {\n        args = JSON.parse(JSON.stringify(args));\n        args.candidate = args.candidate.substr(2);\n      }\n\n      // Augment the native candidate with the parsed fields.\n      var nativeCandidate = new NativeRTCIceCandidate(args);\n      var parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      var augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    };\n\n    // Hook up the augmented candidate in onicecandidate and\n    // addEventListener('icecandidate', ...)\n    wrapPeerConnectionEvent(window, 'icecandidate', function(e) {\n      if (e.candidate) {\n        Object.defineProperty(e, 'candidate', {\n          value: new window.RTCIceCandidate(e.candidate),\n          writable: 'false'\n        });\n      }\n      return e;\n    });\n  },\n\n  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.\n\n  shimCreateObjectURL: function(window) {\n    var URL = window && window.URL;\n\n    if (!(typeof window === 'object' && window.HTMLMediaElement &&\n          'srcObject' in window.HTMLMediaElement.prototype &&\n        URL.createObjectURL && URL.revokeObjectURL)) {\n      // Only shim CreateObjectURL using srcObject if srcObject exists.\n      return undefined;\n    }\n\n    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);\n    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);\n    var streams = new Map(), newId = 0;\n\n    URL.createObjectURL = function(stream) {\n      if ('getTracks' in stream) {\n        var url = 'polyblob:' + (++newId);\n        streams.set(url, stream);\n        utils.deprecated('URL.createObjectURL(stream)',\n            'elem.srcObject = stream');\n        return url;\n      }\n      return nativeCreateObjectURL(stream);\n    };\n    URL.revokeObjectURL = function(url) {\n      nativeRevokeObjectURL(url);\n      streams.delete(url);\n    };\n\n    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,\n                                              'src');\n    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {\n      get: function() {\n        return dsc.get.apply(this);\n      },\n      set: function(url) {\n        this.srcObject = streams.get(url) || null;\n        return dsc.set.apply(this, [url]);\n      }\n    });\n\n    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;\n    window.HTMLMediaElement.prototype.setAttribute = function() {\n      if (arguments.length === 2 &&\n          ('' + arguments[0]).toLowerCase() === 'src') {\n        this.srcObject = streams.get(arguments[1]) || null;\n      }\n      return nativeSetAttribute.apply(this, arguments);\n    };\n  }\n};\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.Interop = require('./interop');\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global RTCSessionDescription */\n/* global RTCIceCandidate */\n/* jshint -W097 */\n\"use strict\";\n\nvar transform = require('./transform');\nvar arrayEquals = require('./array-equals');\n\n/**\n * Unified Plan mids may be parsed as integers\n */\nfunction midToString(line) {\n    if (typeof line.mid === 'number') {\n        line.mid = line.mid.toString();\n    }\n}\n\n\nfunction Interop() {\n\n    /**\n     * This map holds the most recent Unified Plan offer/answer SDP that was\n     * converted to Plan B, with the SDP type ('offer' or 'answer') as keys and\n     * the SDP string as values.\n     *\n     * @type {{}}\n     */\n    this.cache = {\n        mlB2UMap : {},\n        mlU2BMap : {}\n    };\n}\n\nmodule.exports = Interop;\n\n/**\n * Changes the candidate args to match with the related Unified Plan\n */\nInterop.prototype.candidateToUnifiedPlan = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    cand.sdpMLineIndex = this.cache.mlB2UMap[cand.sdpMLineIndex];\n    /* TODO: change sdpMid to (audio|video)-SSRC */\n\n    return cand;\n};\n\n/**\n * Changes the candidate args to match with the related Plan B\n */\nInterop.prototype.candidateToPlanB = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    if (cand.sdpMid.indexOf('audio') === 0) {\n      cand.sdpMid = 'audio';\n    } else if (cand.sdpMid.indexOf('video') === 0) {\n      cand.sdpMid = 'video';\n    } else {\n      throw new Error('candidate with ' + cand.sdpMid + ' not allowed');\n    }\n\n    cand.sdpMLineIndex = this.cache.mlU2BMap[cand.sdpMLineIndex];\n\n    return cand;\n};\n\n/**\n * Returns the index of the first m-line with the given media type and with a\n * direction which allows sending, in the last Unified Plan description with\n * type \"answer\" converted to Plan B. Returns {null} if there is no saved\n * answer, or if none of its m-lines with the given type allow sending.\n * @param type the media type (\"audio\" or \"video\").\n * @returns {*}\n */\nInterop.prototype.getFirstSendingIndexFromAnswer = function(type) {\n    if (!this.cache.answer) {\n        return null;\n    }\n\n    var session = transform.parse(this.cache.answer);\n    if (session && session.media && Array.isArray(session.media)){\n        for (var i = 0; i < session.media.length; i++) {\n            if (session.media[i].type == type &&\n                (!session.media[i].direction /* default to sendrecv */ ||\n                    session.media[i].direction === 'sendrecv' ||\n                    session.media[i].direction === 'sendonly')){\n                return i;\n            }\n        }\n    }\n\n    return null;\n};\n\n/**\n * This method transforms a Unified Plan SDP to an equivalent Plan B SDP. A\n * PeerConnection wrapper transforms the SDP to Plan B before passing it to the\n * application.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toPlanB = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    // Objectify the SDP for easier manipulation.\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Unified Plan SDP. Plan B\n    // SDP has a video, an audio and a data \"channel\" at most.\n    if (session.media.length <= 3 && session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Unified Plan.');\n        return desc;\n    }\n\n    //#endregion\n\n    // HACK https://bugzilla.mozilla.org/show_bug.cgi?id=1113443\n    var sdp = desc.sdp;\n    var rewrite = false;\n    for (var i = 0; i < session.media.length; i++) {\n        var uLine = session.media[i];\n        uLine.rtp.forEach(function(rtp) {\n            if (rtp.codec === 'NULL')\n            {\n                rewrite = true;\n                var offer = transform.parse(self.cache.offer);\n                rtp.codec = offer.media[i].rtp[0].codec;\n            }\n        });\n    }\n    if (rewrite) {\n        sdp = transform.write(session);\n    }\n\n    // Unified Plan SDP is our \"precious\". Cache it for later use in the Plan B\n    // -> Unified Plan transformation.\n    this.cache[desc.type] = sdp;\n\n    //#region Convert from Unified Plan to Plan B.\n\n    // We rebuild the session.media array.\n    var media = session.media;\n    session.media = [];\n\n    // Associative array that maps channel types to channel objects for fast\n    // access to channel objects by their type, e.g. type2bl['audio']->channel\n    // obj.\n    var type2bl = {};\n\n    // Used to build the group:BUNDLE value after the channels construction\n    // loop.\n    var types = [];\n\n    // Used to aggregate the directions of the m-lines.\n    var directionResult = {};\n\n    media.forEach(function(uLine) {\n        midToString(uLine);\n        // rtcp-mux is required in the Plan B SDP.\n        if ((typeof uLine.rtcpMux !== 'string' ||\n            uLine.rtcpMux !== 'rtcp-mux') &&\n            uLine.direction !== 'inactive' && uLine.type !== 'application') {\n            throw new Error('Cannot convert to Plan B because m-lines ' +\n                'without the rtcp-mux attribute were found.');\n        }\n\n        // If we don't have a channel for this uLine.type OR the selected is\n        // inactive, then select this uLine as the channel basis.\n        if (typeof type2bl[uLine.type] === 'undefined' ||\n            type2bl[uLine.type].direction === 'inactive') {\n            type2bl[uLine.type] = uLine;\n        }\n    });\n\n    // Implode the Unified Plan m-lines/tracks into Plan B channels.\n    media.forEach(function(uLine) {\n        var type = uLine.type;\n\n        if (type === 'application') {\n            uLine.mid = \"data\";\n            session.media.push(uLine);\n            types.push(uLine.mid);\n            return;\n        }\n\n        // Add sources to the channel and handle a=msid.\n        if (typeof uLine.sources === 'object') {\n            Object.keys(uLine.sources).forEach(function(ssrc) {\n                if (typeof type2bl[type].sources !== 'object')\n                    type2bl[type].sources = {};\n\n                // Assign the sources to the channel.\n                type2bl[type].sources[ssrc] = uLine.sources[ssrc];\n\n                if (typeof uLine.msid !== 'undefined') {\n                    // In Plan B the msid is an SSRC attribute. Also, we don't\n                    // care about the obsolete label and mslabel attributes.\n                    //\n                    // Note that it is not guaranteed that the uLine will\n                    // have an msid. recvonly channels in particular don't have\n                    // one.\n                    type2bl[type].sources[ssrc].msid = uLine.msid;\n                }\n                // NOTE ssrcs in ssrc groups will share msids, as\n                // draft-uberti-rtcweb-plan-00 mandates.\n            });\n        }\n\n        // Add ssrc groups to the channel.\n        if (typeof uLine.ssrcGroups !== 'undefined' &&\n                Array.isArray(uLine.ssrcGroups)) {\n\n            // Create the ssrcGroups array, if it's not defined.\n            if (typeof type2bl[type].ssrcGroups === 'undefined' ||\n                    !Array.isArray(type2bl[type].ssrcGroups)) {\n                type2bl[type].ssrcGroups = [];\n            }\n\n            // Different ssrc may belong to the same group\n            if (!arrayEquals.apply(type2bl[type].ssrcGroups,\n                                   [uLine.ssrcGroups])) {\n                type2bl[type].ssrcGroups\n                    = type2bl[type].ssrcGroups.concat(uLine.ssrcGroups);\n            }\n        }\n\n        var direction = uLine.direction;\n\n        directionResult[type]\n            = (directionResult[type] || 0 /* inactive */)\n                | directionMasks[direction || 'inactive'];\n\n        if (type2bl[type] === uLine) {\n            // Plan B mids are in ['audio', 'video', 'data']\n            uLine.mid = type;\n\n            // Plan B doesn't support/need the bundle-only attribute.\n            delete uLine.bundleOnly;\n\n            // In Plan B the msid is an SSRC attribute.\n            delete uLine.msid;\n\n            if (direction !== 'inactive') {\n              // Used to build the group:BUNDLE value after this loop.\n              types.push(type);\n            }\n\n            // Add the channel to the new media array.\n            session.media.push(uLine);\n        }\n    });\n\n    // We regenerate the BUNDLE group with the new mids.\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = types.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * This method transforms a Plan B SDP to an equivalent Unified Plan SDP. A\n * PeerConnection wrapper transforms the SDP to Unified Plan before passing it\n * to FF.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toUnifiedPlan = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Plan B SDP. Plan B SDP has\n    // a video, an audio and a data \"channel\" at most.\n    if (session.media.length > 3 || !session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Plan B.');\n        return desc;\n    }\n\n    // Make sure this Plan B SDP can be converted to a Unified Plan SDP.\n    var mids = [];\n    session.media.forEach(function(m) {\n        mids.push(m.mid);\n    });\n\n    var hasBundle = false;\n    if (typeof session.groups !== 'undefined' &&\n        Array.isArray(session.groups)) {\n        hasBundle = session.groups.every(function(g) {\n            return g.type !== 'BUNDLE' ||\n                arrayEquals.apply(g.mids.sort(), [mids.sort()]);\n        });\n    }\n\n    if (!hasBundle) {\n        throw new Error(\"Cannot convert to Unified Plan because m-lines that\" +\n            \" are not bundled were found.\");\n    }\n\n    //#endregion\n\n\n    //#region Convert from Plan B to Unified Plan.\n\n    // Unfortunately, a Plan B offer/answer doesn't have enough information to\n    // rebuild an equivalent Unified Plan offer/answer.\n    //\n    // For example, if this is a local answer (in Unified Plan style) that we\n    // convert to Plan B prior to handing it over to the application (the\n    // PeerConnection wrapper called us, for instance, after a successful\n    // createAnswer), we want to remember the m-line at which we've seen the\n    // (local) SSRC. That's because when the application wants to do call the\n    // SLD method, forcing us to do the inverse transformation (from Plan B to\n    // Unified Plan), we need to know to which m-line to assign the (local)\n    // SSRC. We also need to know all the other m-lines that the original\n    // answer had and include them in the transformed answer as well.\n    //\n    // Another example is if this is a remote offer that we convert to Plan B\n    // prior to giving it to the application, we want to remember the mid at\n    // which we've seen the (remote) SSRC.\n    //\n    // In the iteration that follows, we use the cached Unified Plan (if it\n    // exists) to assign mids to ssrcs.\n\n    var cached;\n    if (typeof this.cache[desc.type] !== 'undefined') {\n        cached = transform.parse(this.cache[desc.type]);\n    }\n\n    var recvonlySsrcs = {\n        audio: {},\n        video: {}\n    };\n\n    // A helper map that sends mids to m-line objects. We use it later to\n    // rebuild the Unified Plan style session.media array.\n    var mid2ul = {};\n    var bIdx = 0;\n    var uIdx = 0;\n\n    session.media.forEach(function(bLine) {\n\n        if ((typeof bLine.rtcpMux !== 'string' ||\n            bLine.rtcpMux !== 'rtcp-mux') &&\n            bLine.direction !== 'inactive' && bLine.type !== 'application') {\n            throw new Error(\"Cannot convert to Unified Plan because m-lines \" +\n                \"without the rtcp-mux attribute were found.\");\n        }\n\n        if (bLine.type === 'application') {\n            var uLineData = null;\n            if (cached && cached.media) {\n                uLineData = cached.media.find(function(uLine) {\n                    return uLine.type === 'application';\n                });\n            }\n            if (uLineData) {\n                mid2ul[uLineData.mid] = uLineData;\n            } else {\n                mid2ul[bLine.mid] = bLine;\n            }\n            return;\n        }\n\n        // With rtcp-mux and bundle all the channels should have the same ICE\n        // stuff.\n        var sources = bLine.sources;\n        var ssrcGroups = bLine.ssrcGroups;\n        var candidates = bLine.candidates;\n        var iceUfrag = bLine.iceUfrag;\n        var icePwd = bLine.icePwd;\n        var fingerprint = bLine.fingerprint;\n        var port = bLine.port;\n\n        // We'll use the \"bLine\" object as a prototype for each new \"mLine\"\n        // that we create, but first we need to clean it up a bit.\n        delete bLine.sources;\n        delete bLine.ssrcGroups;\n        delete bLine.candidates;\n        delete bLine.iceUfrag;\n        delete bLine.icePwd;\n        delete bLine.fingerprint;\n        delete bLine.port;\n        delete bLine.mid;\n\n        // inverted ssrc group map\n        var ssrc2group = {};\n        if (typeof ssrcGroups !== 'undefined' && Array.isArray(ssrcGroups)) {\n            ssrcGroups.forEach(function (ssrcGroup) {\n\n                // TODO(gp) find out how to receive simulcast with FF. For the\n                // time being, hide it.\n                if (ssrcGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                // XXX This might brake if an SSRC is in more than one group\n                // for some reason.\n                if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                    Array.isArray(ssrcGroup.ssrcs)) {\n                    ssrcGroup.ssrcs.forEach(function (ssrc) {\n                        if (typeof ssrc2group[ssrc] === 'undefined') {\n                            ssrc2group[ssrc] = [];\n                        }\n\n                        ssrc2group[ssrc].push(ssrcGroup);\n                    });\n                }\n            });\n        }\n\n        // ssrc to m-line index.\n        var ssrc2ml = {};\n\n        if (typeof sources === 'object') {\n\n            // Explode the Plan B channel sources with one m-line per source.\n            Object.keys(sources).forEach(function(ssrc) {\n\n                // The (unified) m-line for this SSRC. We either create it from\n                // scratch or, if it's a grouped SSRC, we re-use a related\n                // mline. In other words, if the source is grouped with another\n                // source, put the two together in the same m-line.\n                var uLine;\n\n                // We assume here that we are the answerer in the O/A, so any\n                // offers which we translate come from the remote side, while\n                // answers are local. So the check below is to make that we\n                // handle receive-only SSRCs in a special way only if they come\n                // from the remote side.\n                if (desc.type==='offer') {\n                    // We want to detect SSRCs which are used by a remote peer\n                    // in an m-line with direction=recvonly (i.e. they are\n                    // being used for RTCP only).\n                    // This information would have gotten lost if the remote\n                    // peer used Unified Plan and their local description was\n                    // translated to Plan B. So we use the lack of an MSID\n                    // attribute to deduce a \"receive only\" SSRC.\n                    if (!sources[ssrc].msid) {\n                        recvonlySsrcs[bLine.type][ssrc] = sources[ssrc];\n                        // Receive-only SSRCs must not create new m-lines. We\n                        // will assign them to an existing m-line later.\n                        return;\n                    }\n                }\n\n                if (typeof ssrc2group[ssrc] !== 'undefined' &&\n                    Array.isArray(ssrc2group[ssrc])) {\n                    ssrc2group[ssrc].some(function (ssrcGroup) {\n                        // ssrcGroup.ssrcs *is* an Array, no need to check\n                        // again here.\n                        return ssrcGroup.ssrcs.some(function (related) {\n                            if (typeof ssrc2ml[related] === 'object') {\n                                uLine = ssrc2ml[related];\n                                return true;\n                            }\n                        });\n                    });\n                }\n\n                if (typeof uLine === 'object') {\n                    // the m-line already exists. Just add the source.\n                    uLine.sources[ssrc] = sources[ssrc];\n                    delete sources[ssrc].msid;\n                } else {\n                    // Use the \"bLine\" as a prototype for the \"uLine\".\n                    uLine = Object.create(bLine);\n                    ssrc2ml[ssrc] = uLine;\n\n                    if (typeof sources[ssrc].msid !== 'undefined') {\n                        // Assign the msid of the source to the m-line. Note\n                        // that it is not guaranteed that the source will have\n                        // msid. In particular \"recvonly\" sources don't have an\n                        // msid. Note that \"recvonly\" is a term only defined\n                        // for m-lines.\n                        uLine.msid = sources[ssrc].msid;\n                        delete sources[ssrc].msid;\n                    }\n\n                    // We assign one SSRC per media line.\n                    uLine.sources = {};\n                    uLine.sources[ssrc] = sources[ssrc];\n                    uLine.ssrcGroups = ssrc2group[ssrc];\n\n                    // Use the cached Unified Plan SDP (if it exists) to assign\n                    // SSRCs to mids.\n                    if (typeof cached !== 'undefined' &&\n                        typeof cached.media !== 'undefined' &&\n                        Array.isArray(cached.media)) {\n\n                        cached.media.forEach(function (m) {\n                            if (typeof m.sources === 'object') {\n                                Object.keys(m.sources).forEach(function (s) {\n                                    if (s === ssrc) {\n                                        uLine.mid = m.mid;\n                                    }\n                                });\n                            }\n                        });\n                    }\n\n                    midToString(uLine);\n\n                    if (typeof uLine.mid === 'undefined') {\n\n                        // If this is an SSRC that we see for the first time\n                        // assign it a new mid. This is typically the case when\n                        // this method is called to transform a remote\n                        // description for the first time or when there is a\n                        // new SSRC in the remote description because a new\n                        // peer has joined the conference. Local SSRCs should\n                        // have already been added to the map in the toPlanB\n                        // method.\n                        //\n                        // Because FF generates answers in Unified Plan style,\n                        // we MUST already have a cached answer with all the\n                        // local SSRCs mapped to some m-line/mid.\n\n                        if (desc.type === 'answer') {\n                            throw new Error(\"An unmapped SSRC was found.\");\n                        }\n\n                        uLine.mid = [bLine.type, '-', ssrc].join('');\n                    }\n\n                    // Include the candidates in the 1st media line.\n                    uLine.candidates = candidates;\n                    uLine.iceUfrag = iceUfrag;\n                    uLine.icePwd = icePwd;\n                    uLine.fingerprint = fingerprint;\n                    uLine.port = port;\n\n                    mid2ul[uLine.mid] = uLine;\n\n                    self.cache.mlU2BMap[uIdx] = bIdx;\n                    if (typeof self.cache.mlB2UMap[bIdx] === 'undefined') {\n                      self.cache.mlB2UMap[bIdx] = uIdx;\n                    }\n                    uIdx++;\n                }\n            });\n        }\n\n        bIdx++;\n    });\n\n    // Rebuild the media array in the right order and add the missing mLines\n    // (missing from the Plan B SDP).\n    session.media = [];\n    mids = []; // reuse\n\n    if (desc.type === 'answer') {\n\n        // The media lines in the answer must match the media lines in the\n        // offer. The order is important too. Here we assume that Firefox is\n        // the answerer, so we merely have to use the reconstructed (unified)\n        // answer to update the cached (unified) answer accordingly.\n        //\n        // In the general case, one would have to use the cached (unified)\n        // offer to find the m-lines that are missing from the reconstructed\n        // answer, potentially grabbing them from the cached (unified) answer.\n        // One has to be careful with this approach because inactive m-lines do\n        // not always have an mid, making it tricky (impossible?) to find where\n        // exactly and which m-lines are missing from the reconstructed answer.\n\n        for (var i = 0; i < cached.media.length; i++) {\n            var uLine = cached.media[i];\n            midToString(uLine);\n\n            if (typeof mid2ul[uLine.mid] === 'undefined') {\n\n                // The mid isn't in the reconstructed (unified) answer.\n                // This is either a (unified) m-line containing a remote\n                // track only, or a (unified) m-line containing a remote\n                // track and a local track that has been removed.\n                // In either case, it MUST exist in the cached\n                // (unified) answer.\n                //\n                // In case this is a removed local track, clean-up\n                // the (unified) m-line and make sure it's 'recvonly' or\n                // 'inactive'.\n\n                delete uLine.msid;\n                delete uLine.sources;\n                delete uLine.ssrcGroups;\n                if (!uLine.direction\n                    || uLine.direction === 'sendrecv')\n                    uLine.direction = 'recvonly';\n                else if (uLine.direction === 'sendonly')\n                    uLine.direction = 'inactive';\n            } else {\n                // This is an (unified) m-line/channel that contains a local\n                // track (sendrecv or sendonly channel) or it's a unified\n                // recvonly m-line/channel. In either case, since we're\n                // going from PlanB -> Unified Plan this m-line MUST\n                // exist in the cached answer.\n            }\n\n            session.media.push(uLine);\n            if (typeof uLine.mid === 'string') {\n                // inactive lines don't/may not have an mid.\n                mids.push(uLine.mid);\n            }\n        }\n    } else {\n\n        // SDP offer/answer (and the JSEP spec) forbids removing an m-section\n        // under any circumstances. If we are no longer interested in sending a\n        // track, we just remove the msid and ssrc attributes and set it to\n        // either a=recvonly (as the reofferer, we must use recvonly if the\n        // other side was previously sending on the m-section, but we can also\n        // leave the possibility open if it wasn't previously in use), or\n        // a=inactive.\n\n        if (typeof cached !== 'undefined' &&\n            typeof cached.media !== 'undefined' &&\n            Array.isArray(cached.media)) {\n            cached.media.forEach(function(uLine) {\n                midToString(uLine);\n                mids.push(uLine.mid);\n                if (typeof mid2ul[uLine.mid] !== 'undefined') {\n                    session.media.push(mid2ul[uLine.mid]);\n                } else {\n                    delete uLine.msid;\n                    delete uLine.sources;\n                    delete uLine.ssrcGroups;\n                    if (!uLine.direction\n                        || uLine.direction === 'sendrecv')\n                        uLine.direction = 'recvonly';\n                    if (!uLine.direction\n                        || uLine.direction === 'sendonly')\n                        uLine.direction = 'inactive';\n                    session.media.push(uLine);\n                }\n            });\n        }\n\n        // Add all the remaining (new) m-lines of the transformed SDP.\n        Object.keys(mid2ul).forEach(function(mid) {\n            if (mids.indexOf(mid) === -1) {\n                mids.push(mid);\n                if (mid2ul[mid].direction === 'recvonly') {\n                    // This is a remote recvonly channel. Add its SSRC to the\n                    // appropriate sendrecv or sendonly channel.\n                    // TODO(gp) what if we don't have sendrecv/sendonly\n                    // channel?\n\n                    session.media.some(function (uLine) {\n                        if ((uLine.direction === 'sendrecv' ||\n                            uLine.direction === 'sendonly') &&\n                            uLine.type === mid2ul[mid].type) {\n\n                            // mid2ul[mid] shouldn't have any ssrc-groups\n                            Object.keys(mid2ul[mid].sources).forEach(\n                                function (ssrc) {\n                                uLine.sources[ssrc] =\n                                    mid2ul[mid].sources[ssrc];\n                            });\n\n                            return true;\n                        }\n                    });\n                } else {\n                    session.media.push(mid2ul[mid]);\n                }\n            }\n        });\n    }\n\n    // After we have constructed the Plan Unified m-lines we can figure out\n    // where (in which m-line) to place the 'recvonly SSRCs'.\n    // Note: we assume here that we are the answerer in the O/A, so any offers\n    // which we translate come from the remote side, while answers are local\n    // (and so our last local description is cached as an 'answer').\n    [\"audio\", \"video\"].forEach(function (type) {\n        if (!session || !session.media || !Array.isArray(session.media))\n            return;\n\n        var idx = null;\n        if (Object.keys(recvonlySsrcs[type]).length > 0) {\n            idx = self.getFirstSendingIndexFromAnswer(type);\n            if (idx === null){\n                // If this is the first offer we receive, we don't have a\n                // cached answer. Assume that we will be sending media using\n                // the first m-line for each media type.\n\n                for (var i = 0; i < session.media.length; i++) {\n                    if (session.media[i].type === type) {\n                        idx = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (idx && session.media.length > idx) {\n            var mLine = session.media[idx];\n            Object.keys(recvonlySsrcs[type]).forEach(function(ssrc) {\n                if (mLine.sources && mLine.sources[ssrc]) {\n                    console.warn(\"Replacing an existing SSRC.\");\n                }\n                if (!mLine.sources) {\n                    mLine.sources = {};\n                }\n\n                mLine.sources[ssrc] = recvonlySsrcs[type][ssrc];\n            });\n        }\n    });\n\n    // We regenerate the BUNDLE group (since we regenerated the mids)\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = mids.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    // Cache the transformed SDP (Unified Plan) for later re-use in this\n    // function.\n    this.cache[desc.type] = resStr;\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * Maps the direction strings to their binary representation. The binary\n * representation of the directions will contain only 2 bits. The least\n * significant bit will indicate the receiving direction and the other bit will\n * indicate the sending direction.\n *\n * @type {Map<string, number>}\n */\nvar directionMasks = {\n    'inactive': 0, // 00\n    'recvonly': 1, // 01\n    'sendonly': 2, // 10\n    'sendrecv': 3  // 11\n};\n\n/**\n * Parses a number into direction string.\n *\n * @param {number} direction - The number to be parsed.\n * @returns {string} - The parsed direction string.\n */\nfunction parseDirection(direction) { // eslint-disable-line no-unused-vars\n    // Filter all other bits except the 2 less significant.\n    var directionMask = direction & 3;\n\n    switch (directionMask) {\n    case 0:\n        return 'inactive';\n    case 1:\n        return 'recvonly';\n    case 2:\n        return 'sendonly';\n    case 3:\n        return 'sendrecv';\n    }\n}\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\n\nexports.write = function(session, opts) {\n\n  if (typeof session !== 'undefined' &&\n      typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // expand sources to ssrcs\n      if (typeof mLine.sources !== 'undefined' &&\n        Object.keys(mLine.sources).length !== 0) {\n          mLine.ssrcs = [];\n          Object.keys(mLine.sources).forEach(function (ssrc) {\n            var source = mLine.sources[ssrc];\n            Object.keys(source).forEach(function (attribute) {\n              mLine.ssrcs.push({\n                id: ssrc,\n                attribute: attribute,\n                value: source[attribute]\n              });\n            });\n          });\n          delete mLine.sources;\n        }\n\n      // join ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                Array.isArray(ssrcGroup.ssrcs)) {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n            }\n          });\n        }\n    });\n  }\n\n  // join group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids !== 'undefined' && Array.isArray(g.mids)) {\n        g.mids = g.mids.join(' ');\n      }\n    });\n  }\n\n  return transform.write(session, opts);\n};\n\nexports.parse = function(sdp) {\n  var session = transform.parse(sdp);\n\n  if (typeof session !== 'undefined' && typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // group sources attributes by ssrc\n      if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n        mLine.sources = {};\n        mLine.ssrcs.forEach(function (ssrc) {\n          if (!mLine.sources[ssrc.id])\n          mLine.sources[ssrc.id] = {};\n        mLine.sources[ssrc.id][ssrc.attribute] = ssrc.value;\n        });\n\n        delete mLine.ssrcs;\n      }\n\n      // split ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs === 'string') {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n            }\n          });\n        }\n    });\n  }\n  // split group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids === 'string') {\n        g.mids = g.mids.split(' ');\n      }\n    });\n  }\n\n  return session;\n};\n\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function arrayEquals(array) {\n    // if the other array is a falsy value, return\n    if (!array)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (this.length != array.length)\n        return false;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (this[i] instanceof Array && array[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!arrayEquals.apply(this[i], [array[i]]))\n                return false;\n        } else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal:\n            // {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Make sure that we ALWAYS add the conference flag to the remote\n        // description: That flag is deprecated but, as of this writing\n        // (09/2019), it's still used in jitsi-meet to enable legacy simulcast\n        // when screen-sharing (https://cs.chromium.org/chromium/src/third_party/webrtc/media/base/media_channel.h?rcl=f2773b54647633d5725fa25dea883f99dd1b400c&l=838).\n        //\n        // We've observed the following chain of events that almost always\n        // results in connectivity issues at the receiver:\n        //\n        // 1. The user joins a call with startVideoMuted=true, so there's no\n        //    jitsi track created.\n        // 2. The user enables screen-sharing. At this point we do a\n        //    renegotiation (which starts with an sRD); the ssrcCache is empty,\n        //    so the conference flag is not added to the remote description SDP.\n        // 3. The next step of the re-negotiation is to set the answer, so\n        //    mungeLocalDescription is called, and because now we have a track\n        //    due to the user enabling screen-sharing, it enables simulcast.\n        // 4. sLD is called with simulcast ssrcs, but the sRD call of step 2\n        //    didn't add the conference flag in the SDP, so the screen-sharing\n        //    is without simulcast.\n        // 5. Any subsequent re-negotiation (for example, due to a participant\n        //    joining/leaving the call) will enable simulcast and this switch\n        //    almost always results in a broken stream at the receiver.\n\n        assertGoogConference(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\t// FIXME add a check for proto/connection state DISCONNECTED\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function(condition) {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\tthis._originalDoDisconnect.apply(this._c, condition);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst TranscriptionService = require('./AbstractTranscriptionService');\nconst Word = require('../word');\nconst audioRecorder = require('./../audioRecorder');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n"],"sourceRoot":""}